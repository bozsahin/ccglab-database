
> (mlg "g")


======================= c o m p i l i n g ===================================

Project name: g
  Input : (g.ccg, g.lisptokens)
  Output: g.ccg.lisp 
** Check g.ccg.lisp for THE FIRST ERROR in g.ccg if load fails.
======================= l o a d i n g =======================================

Project g files
-----------------------------------------------------------------------------
  CCG grammar source      : g.ccg
    Its token form        : g.lisptokens
  Compiled/loaded grammar : g.ccg.lisp
  Supervision source      : g.sup (optional)
       *CCG-GRAMMAR*      : 12 entries
   *LEX-RULES-TABLE*      : 0 entries
=============================================================================
T
> (which-ccglab)

"CCGlab, version 7.0"
> (load "g.testsuite.lisp")

T
> (test-ders)


  do (rules) or (onoff) for rules and switches
  ---------------------------
  Any non-standard rule     ? NO
  Currently loaded grammar  : g.ccg.lisp
 *CCG-GRAMMAR*              : 12 items
 *LEX-RULES-TABLE*          : 0 items
 *CKY-HASHTABLE*            : 11 items
 *CKY-INPUT* for the table  : (UYU -MA -YAN ADAM) 
  Most likely LF w/weight   : NIL 
  Its most likely derivation: NIL
  Sum of weighted counts    : 0.0 
  Most likely LF's cells    : NIL 
  Number of differing LFs   : 0 
  Most weighted derivation  : NIL 
  ---------------------------

"CCGlab, version 7.0"
=======
1
(ADAM -IN OKU -DUGU KITAP)
========


Derivation 1
--------------
LEX   (ADAM) := NP
        : (LAM X (MAN X))
LEX   (-IN) := (S/VP)\*NP
        : (LAM X (LAM P (P X)))
<     (ADAM)(-IN) := S/VP
        : ((LAM X (LAM P (P X))) (LAM X (MAN X)))
LEX   (OKU) := VP\NP
        : (LAM X (LAM Y ((READ X) Y)))
>Bx   (ADAM -IN)(OKU) := S\NP
        : (LAM X
           (((LAM X (LAM P (P X))) (LAM X (MAN X)))
            ((LAM X (LAM Y ((READ X) Y))) X)))
LEX   (-DUGU) := (NP/NP)\*(S\NP)
        : (LAM P (LAM Q ((AND (P X)) (Q X))))
<     (ADAM -IN OKU)(-DUGU) := NP/NP
        : ((LAM P (LAM Q ((AND (P X)) (Q X))))
           (LAM X
            (((LAM X (LAM P (P X))) (LAM X (MAN X)))
             ((LAM X (LAM Y ((READ X) Y))) X))))
LEX   (KITAP) := NP
        : (LAM X (BOOK X))
>     (ADAM -IN OKU -DUGU)(KITAP) := NP
        : (((LAM P (LAM Q ((AND (P X)) (Q X))))
            (LAM X
             (((LAM X (LAM P (P X))) (LAM X (MAN X)))
              ((LAM X (LAM Y ((READ X) Y))) X))))
           (LAM X (BOOK X)))

Final LF, normal-order evaluated: 

    ((AND ((READ X) (LAM X (MAN X)))) (BOOK X)) =
    (AND (READ X (\ X . MAN X)) (BOOK X))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
=======
2
(ADAM -IN OKU -YAN KITAP)
========

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
=======
3
(KITAP -I OKU -YAN ADAM)
========


Derivation 1
--------------
LEX   (KITAP) := NP
        : (LAM X (BOOK X))
LEX   (-I) := (VP/(VP\NP))\*NP
        : (LAM P (LAM Q (Q P)))
<     (KITAP)(-I) := VP/(VP\NP)
        : ((LAM P (LAM Q (Q P))) (LAM X (BOOK X)))
LEX   (OKU) := VP\NP
        : (LAM X (LAM Y ((READ X) Y)))
>     (KITAP -I)(OKU) := VP
        : (((LAM P (LAM Q (Q P))) (LAM X (BOOK X)))
           (LAM X (LAM Y ((READ X) Y))))
LEX   (-YAN) := (NP/NP)\*VP
        : (LAM P (LAM Q ((AND (P X)) (Q X))))
<     (KITAP -I OKU)(-YAN) := NP/NP
        : ((LAM P (LAM Q ((AND (P X)) (Q X))))
           (((LAM P (LAM Q (Q P))) (LAM X (BOOK X)))
            (LAM X (LAM Y ((READ X) Y)))))
LEX   (ADAM) := NP
        : (LAM X (MAN X))
>     (KITAP -I OKU -YAN)(ADAM) := NP
        : (((LAM P (LAM Q ((AND (P X)) (Q X))))
            (((LAM P (LAM Q (Q P))) (LAM X (BOOK X)))
             (LAM X (LAM Y ((READ X) Y)))))
           (LAM X (MAN X)))

Final LF, normal-order evaluated: 

    ((AND ((READ (LAM X (BOOK X))) X)) (MAN X)) =
    (AND (READ (\ X . BOOK X) X) (MAN X))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
=======
4
(KITAP -I OKU -DUGU ADAM)
========

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
=======
5
(UYU -MA -YAN ADAM)
========


Derivation 1
--------------
LEX   (UYU) := VP
        : (LAM X (SLEEP X))
LEX   (-MA) := VP\\VP
        : (LAM P (NEG P))
<     (UYU)(-MA) := VP
        : ((LAM P (NEG P)) (LAM X (SLEEP X)))
LEX   (-YAN) := (NP/NP)\\VP
        : (LAM P (LAM Q ((AND (P X)) (Q X))))
<     (UYU -MA)(-YAN) := NP/NP
        : ((LAM P (LAM Q ((AND (P X)) (Q X))))
           ((LAM P (NEG P)) (LAM X (SLEEP X))))
LEX   (ADAM) := NP
        : (LAM X (MAN X))
>     (UYU -MA -YAN)(ADAM) := NP
        : (((LAM P (LAM Q ((AND (P X)) (Q X))))
            ((LAM P (NEG P)) (LAM X (SLEEP X))))
           (LAM X (MAN X)))

Final LF, normal-order evaluated: 

    ((AND ((NEG (LAM X (SLEEP X))) X)) (MAN X)) =
    (AND (NEG (\ X . SLEEP X) X) (MAN X))

Derivation 2
--------------
LEX   (UYU) := VP
        : (LAM X (SLEEP X))
LEX   (-MA) := VP\\VP
        : (LAM P (NEG P))
<     (UYU)(-MA) := VP
        : ((LAM P (NEG P)) (LAM X (SLEEP X)))
LEX   (-YAN) := (NP/NP)\*VP
        : (LAM P (LAM Q ((AND (P X)) (Q X))))
<     (UYU -MA)(-YAN) := NP/NP
        : ((LAM P (LAM Q ((AND (P X)) (Q X))))
           ((LAM P (NEG P)) (LAM X (SLEEP X))))
LEX   (ADAM) := NP
        : (LAM X (MAN X))
>     (UYU -MA -YAN)(ADAM) := NP
        : (((LAM P (LAM Q ((AND (P X)) (Q X))))
            ((LAM P (NEG P)) (LAM X (SLEEP X))))
           (LAM X (MAN X)))

Final LF, normal-order evaluated: 

    ((AND ((NEG (LAM X (SLEEP X))) X)) (MAN X)) =
    (AND (NEG (\ X . SLEEP X) X) (MAN X))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
NIL
> (dribble)
