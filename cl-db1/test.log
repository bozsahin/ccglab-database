
> (load "g-test")

"CCGlab, version 7.1"
=============================================================================
*** CCGlab warning *** There are 2 string-constant categories in your grammar
 make sure NONE are void

======================= c o m p i l i n g ===================================

Project name: g
  Input : (g.ccg, g.lisptokens)
  Output: g.ccg.lisp 
** IF load fails, check g.ccg.lisp for THE FIRST ERROR in g.ccg.
======================= l o a d i n g =======================================

Project g file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  CCG grammar source       : g.ccg
          token form       : g.lisptokens
  Compiled/loaded grammar  : g.ccg.lisp
       *CCG-GRAMMAR*       : 116 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

======================= l o a d i n g =======================================

Project g file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  CCG grammar source       : g.ccg
          token form       : g.lisptokens
  Compiled/loaded grammar  : g.ccg.lisp
       *CCG-GRAMMAR*       : 116 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

Summary of compiling type-raising for grammar   : g.ccg.lisp
There were NO errors/warnings in deriving second order functions
Number of lexical entries                       : 116
Number of lexical functions considered          : 12
Number of second-order case functions generated : 12
Number of paradigmatic functions out of them    : 7
Use (mergesave-tr <pn>) to merge and save the rules
 with current grammar to <pn>.ccg.lisp
Type-raising rules added at the end of *ccg-grammar*
compiled, subsumed and saved.
======================= l o a d i n g =======================================

Project g-en file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  Compiled/loaded grammar  : g-en.ccg.lisp
       *CCG-GRAMMAR*       : 123 entries
   *LEX-RULES-TABLE*       : 7 entries
=============================================================================

Derivations of (I THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) onto S



Derivation 1
--------------
LEX   (I) := NP
        : I
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X))))
LEX   (CATS) := NP
        : CATS
>     (JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S
        : ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X
                 ((LAM P (LAM X ((BELIEVE P) X)))
                  ((LAM X
                    (((LAM LF (LAM P (P LF))) MARY)
                     ((LAM X (LAM Y ((HATE X) Y))) X)))
                   X)))
                X))))
            (LAM X
             (((LAM LF (LAM P (P LF))) JOHN)
              ((LAM X (LAM Y ((LIKE X) Y))) X))))
           CATS)
>     (THINK)(JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S\NP
        : ((LAM P (LAM X ((THINK P) X)))
           ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) YOU)
                ((LAM X
                  ((LAM P (LAM X ((BELIEVE P) X)))
                   ((LAM X
                     (((LAM LF (LAM P (P LF))) MARY)
                      ((LAM X (LAM Y ((HATE X) Y))) X)))
                    X)))
                 X))))
             (LAM X
              (((LAM LF (LAM P (P LF))) JOHN)
               ((LAM X (LAM Y ((LIKE X) Y))) X))))
            CATS))
<     (I)(THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S
        : (((LAM P (LAM X ((THINK P) X)))
            ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X
                   ((LAM P (LAM X ((BELIEVE P) X)))
                    ((LAM X
                      (((LAM LF (LAM P (P LF))) MARY)
                       ((LAM X (LAM Y ((HATE X) Y))) X)))
                     X)))
                  X))))
              (LAM X
               (((LAM LF (LAM P (P LF))) JOHN)
                ((LAM X (LAM Y ((LIKE X) Y))) X))))
             CATS))
           I)

Final LF, normal-order evaluated: 

    ((THINK ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((LIKE CATS) JOHN))) I) =
    (THINK (AND (BELIEVE (HATE CATS MARY) YOU) (LIKE CATS JOHN)) I)

Derivation 2
--------------
LEX   (I) := NP
        : I
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X))))
LEX   (CATS) := NP
        : CATS
>     (JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S
        : ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X
                 ((LAM P (LAM X ((BELIEVE P) X)))
                  ((LAM X
                    (((LAM LF (LAM P (P LF))) MARY)
                     ((LAM X (LAM Y ((HATE X) Y))) X)))
                   X)))
                X))))
            (LAM X
             (((LAM LF (LAM P (P LF))) JOHN)
              ((LAM X (LAM Y ((LIKE X) Y))) X))))
           CATS)
>     (THINK)(JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S\NP
        : ((LAM P (LAM X ((THINK P) X)))
           ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) YOU)
                ((LAM X
                  ((LAM P (LAM X ((BELIEVE P) X)))
                   ((LAM X
                     (((LAM LF (LAM P (P LF))) MARY)
                      ((LAM X (LAM Y ((HATE X) Y))) X)))
                    X)))
                 X))))
             (LAM X
              (((LAM LF (LAM P (P LF))) JOHN)
               ((LAM X (LAM Y ((LIKE X) Y))) X))))
            CATS))
<     (I)(THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S
        : (((LAM P (LAM X ((THINK P) X)))
            ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X
                   ((LAM P (LAM X ((BELIEVE P) X)))
                    ((LAM X
                      (((LAM LF (LAM P (P LF))) MARY)
                       ((LAM X (LAM Y ((HATE X) Y))) X)))
                     X)))
                  X))))
              (LAM X
               (((LAM LF (LAM P (P LF))) JOHN)
                ((LAM X (LAM Y ((LIKE X) Y))) X))))
             CATS))
           I)

Final LF, normal-order evaluated: 

    ((THINK ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((LIKE CATS) JOHN))) I) =
    (THINK (AND (BELIEVE (HATE CATS MARY) YOU) (LIKE CATS JOHN)) I)

Derivation 3
--------------
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X))))
LEX   (CATS) := NP
        : CATS
>     (JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S
        : ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X
                 ((LAM P (LAM X ((BELIEVE P) X)))
                  ((LAM X
                    (((LAM LF (LAM P (P LF))) MARY)
                     ((LAM X (LAM Y ((HATE X) Y))) X)))
                   X)))
                X))))
            (LAM X
             (((LAM LF (LAM P (P LF))) JOHN)
              ((LAM X (LAM Y ((LIKE X) Y))) X))))
           CATS)
LEX   (I) := NP
        : I
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_G2_789 (JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := (S\NP)\^((S\NP)/^S)
        : ((LAM LF (LAM P (P LF)))
           ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) YOU)
                ((LAM X
                  ((LAM P (LAM X ((BELIEVE P) X)))
                   ((LAM X
                     (((LAM LF (LAM P (P LF))) MARY)
                      ((LAM X (LAM Y ((HATE X) Y))) X)))
                    X)))
                 X))))
             (LAM X
              (((LAM LF (LAM P (P LF))) JOHN)
               ((LAM X (LAM Y ((LIKE X) Y))) X))))
            CATS))
<     (THINK)(JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S\NP
        : (((LAM LF (LAM P (P LF)))
            ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X
                   ((LAM P (LAM X ((BELIEVE P) X)))
                    ((LAM X
                      (((LAM LF (LAM P (P LF))) MARY)
                       ((LAM X (LAM Y ((HATE X) Y))) X)))
                     X)))
                  X))))
              (LAM X
               (((LAM LF (LAM P (P LF))) JOHN)
                ((LAM X (LAM Y ((LIKE X) Y))) X))))
             CATS))
           (LAM P (LAM X ((THINK P) X))))
<     (I)(THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S
        : ((((LAM LF (LAM P (P LF)))
             ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
                (LAM X
                 (((LAM LF (LAM P (P LF))) YOU)
                  ((LAM X
                    ((LAM P (LAM X ((BELIEVE P) X)))
                     ((LAM X
                       (((LAM LF (LAM P (P LF))) MARY)
                        ((LAM X (LAM Y ((HATE X) Y))) X)))
                      X)))
                   X))))
               (LAM X
                (((LAM LF (LAM P (P LF))) JOHN)
                 ((LAM X (LAM Y ((LIKE X) Y))) X))))
              CATS))
            (LAM P (LAM X ((THINK P) X))))
           I)

Final LF, normal-order evaluated: 

    ((THINK ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((LIKE CATS) JOHN))) I) =
    (THINK (AND (BELIEVE (HATE CATS MARY) YOU) (LIKE CATS JOHN)) I)

Derivation 4
--------------
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X))))
LEX   (CATS) := NP
        : CATS
>     (JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S
        : ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X
                 ((LAM P (LAM X ((BELIEVE P) X)))
                  ((LAM X
                    (((LAM LF (LAM P (P LF))) MARY)
                     ((LAM X (LAM Y ((HATE X) Y))) X)))
                   X)))
                X))))
            (LAM X
             (((LAM LF (LAM P (P LF))) JOHN)
              ((LAM X (LAM Y ((LIKE X) Y))) X))))
           CATS)
LEX   (I) := NP
        : I
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_G2_789 (JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := (S\NP)\^((S\NP)/^S)
        : ((LAM LF (LAM P (P LF)))
           ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) YOU)
                ((LAM X
                  ((LAM P (LAM X ((BELIEVE P) X)))
                   ((LAM X
                     (((LAM LF (LAM P (P LF))) MARY)
                      ((LAM X (LAM Y ((HATE X) Y))) X)))
                    X)))
                 X))))
             (LAM X
              (((LAM LF (LAM P (P LF))) JOHN)
               ((LAM X (LAM Y ((LIKE X) Y))) X))))
            CATS))
<     (THINK)(JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S\NP
        : (((LAM LF (LAM P (P LF)))
            ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X
                   ((LAM P (LAM X ((BELIEVE P) X)))
                    ((LAM X
                      (((LAM LF (LAM P (P LF))) MARY)
                       ((LAM X (LAM Y ((HATE X) Y))) X)))
                     X)))
                  X))))
              (LAM X
               (((LAM LF (LAM P (P LF))) JOHN)
                ((LAM X (LAM Y ((LIKE X) Y))) X))))
             CATS))
           (LAM P (LAM X ((THINK P) X))))
<     (I)(THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S
        : ((((LAM LF (LAM P (P LF)))
             ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
                (LAM X
                 (((LAM LF (LAM P (P LF))) YOU)
                  ((LAM X
                    ((LAM P (LAM X ((BELIEVE P) X)))
                     ((LAM X
                       (((LAM LF (LAM P (P LF))) MARY)
                        ((LAM X (LAM Y ((HATE X) Y))) X)))
                      X)))
                   X))))
               (LAM X
                (((LAM LF (LAM P (P LF))) JOHN)
                 ((LAM X (LAM Y ((LIKE X) Y))) X))))
              CATS))
            (LAM P (LAM X ((THINK P) X))))
           I)

Final LF, normal-order evaluated: 

    ((THINK ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((LIKE CATS) JOHN))) I) =
    (THINK (AND (BELIEVE (HATE CATS MARY) YOU) (LIKE CATS JOHN)) I)

Derivation 5
--------------
LEX   (I) := NP
        : I
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X))))
>B    (THINK)(JOHN LIKES AND YOU BELIEVE MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((THINK P) X)))
            ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X
                   ((LAM P (LAM X ((BELIEVE P) X)))
                    ((LAM X
                      (((LAM LF (LAM P (P LF))) MARY)
                       ((LAM X (LAM Y ((HATE X) Y))) X)))
                     X)))
                  X))))
              (LAM X
               (((LAM LF (LAM P (P LF))) JOHN)
                ((LAM X (LAM Y ((LIKE X) Y))) X))))
             X)))
_P2_805 (CATS) := (S\NP)\^((S\NP)/^NP)
        : ((LAM LF (LAM P (P LF))) CATS)
<     (THINK JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S\NP
        : (((LAM LF (LAM P (P LF))) CATS)
           (LAM X
            ((LAM P (LAM X ((THINK P) X)))
             ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
                (LAM X
                 (((LAM LF (LAM P (P LF))) YOU)
                  ((LAM X
                    ((LAM P (LAM X ((BELIEVE P) X)))
                     ((LAM X
                       (((LAM LF (LAM P (P LF))) MARY)
                        ((LAM X (LAM Y ((HATE X) Y))) X)))
                      X)))
                   X))))
               (LAM X
                (((LAM LF (LAM P (P LF))) JOHN)
                 ((LAM X (LAM Y ((LIKE X) Y))) X))))
              X))))
<     (I)(THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S
        : ((((LAM LF (LAM P (P LF))) CATS)
            (LAM X
             ((LAM P (LAM X ((THINK P) X)))
              ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
                 (LAM X
                  (((LAM LF (LAM P (P LF))) YOU)
                   ((LAM X
                     ((LAM P (LAM X ((BELIEVE P) X)))
                      ((LAM X
                        (((LAM LF (LAM P (P LF))) MARY)
                         ((LAM X (LAM Y ((HATE X) Y))) X)))
                       X)))
                    X))))
                (LAM X
                 (((LAM LF (LAM P (P LF))) JOHN)
                  ((LAM X (LAM Y ((LIKE X) Y))) X))))
               X))))
           I)

Final LF, normal-order evaluated: 

    ((THINK ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((LIKE CATS) JOHN))) I) =
    (THINK (AND (BELIEVE (HATE CATS MARY) YOU) (LIKE CATS JOHN)) I)

Derivation 6
--------------
LEX   (I) := NP
        : I
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X))))
>B    (THINK)(JOHN LIKES AND YOU BELIEVE MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((THINK P) X)))
            ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X
                   ((LAM P (LAM X ((BELIEVE P) X)))
                    ((LAM X
                      (((LAM LF (LAM P (P LF))) MARY)
                       ((LAM X (LAM Y ((HATE X) Y))) X)))
                     X)))
                  X))))
              (LAM X
               (((LAM LF (LAM P (P LF))) JOHN)
                ((LAM X (LAM Y ((LIKE X) Y))) X))))
             X)))
_P2_805 (CATS) := (S\NP)\^((S\NP)/^NP)
        : ((LAM LF (LAM P (P LF))) CATS)
<     (THINK JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S\NP
        : (((LAM LF (LAM P (P LF))) CATS)
           (LAM X
            ((LAM P (LAM X ((THINK P) X)))
             ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
                (LAM X
                 (((LAM LF (LAM P (P LF))) YOU)
                  ((LAM X
                    ((LAM P (LAM X ((BELIEVE P) X)))
                     ((LAM X
                       (((LAM LF (LAM P (P LF))) MARY)
                        ((LAM X (LAM Y ((HATE X) Y))) X)))
                      X)))
                   X))))
               (LAM X
                (((LAM LF (LAM P (P LF))) JOHN)
                 ((LAM X (LAM Y ((LIKE X) Y))) X))))
              X))))
<     (I)(THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S
        : ((((LAM LF (LAM P (P LF))) CATS)
            (LAM X
             ((LAM P (LAM X ((THINK P) X)))
              ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
                 (LAM X
                  (((LAM LF (LAM P (P LF))) YOU)
                   ((LAM X
                     ((LAM P (LAM X ((BELIEVE P) X)))
                      ((LAM X
                        (((LAM LF (LAM P (P LF))) MARY)
                         ((LAM X (LAM Y ((HATE X) Y))) X)))
                       X)))
                    X))))
                (LAM X
                 (((LAM LF (LAM P (P LF))) JOHN)
                  ((LAM X (LAM Y ((LIKE X) Y))) X))))
               X))))
           I)

Final LF, normal-order evaluated: 

    ((THINK ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((LIKE CATS) JOHN))) I) =
    (THINK (AND (BELIEVE (HATE CATS MARY) YOU) (LIKE CATS JOHN)) I)

Derivation 79
--------------
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X))))
LEX   (CATS) := NP
        : CATS
>     (JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S
        : ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X
                 ((LAM P (LAM X ((BELIEVE P) X)))
                  ((LAM X
                    (((LAM LF (LAM P (P LF))) MARY)
                     ((LAM X (LAM Y ((HATE X) Y))) X)))
                   X)))
                X))))
            (LAM X
             (((LAM LF (LAM P (P LF))) JOHN)
              ((LAM X (LAM Y ((LIKE X) Y))) X))))
           CATS)
>     (THINK)(JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S\NP
        : ((LAM P (LAM X ((THINK P) X)))
           ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) YOU)
                ((LAM X
                  ((LAM P (LAM X ((BELIEVE P) X)))
                   ((LAM X
                     (((LAM LF (LAM P (P LF))) MARY)
                      ((LAM X (LAM Y ((HATE X) Y))) X)))
                    X)))
                 X))))
             (LAM X
              (((LAM LF (LAM P (P LF))) JOHN)
               ((LAM X (LAM Y ((LIKE X) Y))) X))))
            CATS))
>     (I)(THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S
        : (((LAM LF (LAM P (P LF))) I)
           ((LAM P (LAM X ((THINK P) X)))
            ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X
                   ((LAM P (LAM X ((BELIEVE P) X)))
                    ((LAM X
                      (((LAM LF (LAM P (P LF))) MARY)
                       ((LAM X (LAM Y ((HATE X) Y))) X)))
                     X)))
                  X))))
              (LAM X
               (((LAM LF (LAM P (P LF))) JOHN)
                ((LAM X (LAM Y ((LIKE X) Y))) X))))
             CATS)))

Final LF, normal-order evaluated: 

    ((THINK ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((LIKE CATS) JOHN))) I) =
    (THINK (AND (BELIEVE (HATE CATS MARY) YOU) (LIKE CATS JOHN)) I)

Derivation 80
--------------
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X))))
LEX   (CATS) := NP
        : CATS
>     (JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S
        : ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X
                 ((LAM P (LAM X ((BELIEVE P) X)))
                  ((LAM X
                    (((LAM LF (LAM P (P LF))) MARY)
                     ((LAM X (LAM Y ((HATE X) Y))) X)))
                   X)))
                X))))
            (LAM X
             (((LAM LF (LAM P (P LF))) JOHN)
              ((LAM X (LAM Y ((LIKE X) Y))) X))))
           CATS)
>     (THINK)(JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S\NP
        : ((LAM P (LAM X ((THINK P) X)))
           ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) YOU)
                ((LAM X
                  ((LAM P (LAM X ((BELIEVE P) X)))
                   ((LAM X
                     (((LAM LF (LAM P (P LF))) MARY)
                      ((LAM X (LAM Y ((HATE X) Y))) X)))
                    X)))
                 X))))
             (LAM X
              (((LAM LF (LAM P (P LF))) JOHN)
               ((LAM X (LAM Y ((LIKE X) Y))) X))))
            CATS))
>     (I)(THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S
        : (((LAM LF (LAM P (P LF))) I)
           ((LAM P (LAM X ((THINK P) X)))
            ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X
                   ((LAM P (LAM X ((BELIEVE P) X)))
                    ((LAM X
                      (((LAM LF (LAM P (P LF))) MARY)
                       ((LAM X (LAM Y ((HATE X) Y))) X)))
                     X)))
                  X))))
              (LAM X
               (((LAM LF (LAM P (P LF))) JOHN)
                ((LAM X (LAM Y ((LIKE X) Y))) X))))
             CATS)))

Final LF, normal-order evaluated: 

    ((THINK ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((LIKE CATS) JOHN))) I) =
    (THINK (AND (BELIEVE (HATE CATS MARY) YOU) (LIKE CATS JOHN)) I)

Derivation 81
--------------
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X))))
LEX   (CATS) := NP
        : CATS
>     (JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S
        : ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X
                 ((LAM P (LAM X ((BELIEVE P) X)))
                  ((LAM X
                    (((LAM LF (LAM P (P LF))) MARY)
                     ((LAM X (LAM Y ((HATE X) Y))) X)))
                   X)))
                X))))
            (LAM X
             (((LAM LF (LAM P (P LF))) JOHN)
              ((LAM X (LAM Y ((LIKE X) Y))) X))))
           CATS)
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_G2_789 (JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := (S\NP)\^((S\NP)/^S)
        : ((LAM LF (LAM P (P LF)))
           ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) YOU)
                ((LAM X
                  ((LAM P (LAM X ((BELIEVE P) X)))
                   ((LAM X
                     (((LAM LF (LAM P (P LF))) MARY)
                      ((LAM X (LAM Y ((HATE X) Y))) X)))
                    X)))
                 X))))
             (LAM X
              (((LAM LF (LAM P (P LF))) JOHN)
               ((LAM X (LAM Y ((LIKE X) Y))) X))))
            CATS))
<     (THINK)(JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S\NP
        : (((LAM LF (LAM P (P LF)))
            ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X
                   ((LAM P (LAM X ((BELIEVE P) X)))
                    ((LAM X
                      (((LAM LF (LAM P (P LF))) MARY)
                       ((LAM X (LAM Y ((HATE X) Y))) X)))
                     X)))
                  X))))
              (LAM X
               (((LAM LF (LAM P (P LF))) JOHN)
                ((LAM X (LAM Y ((LIKE X) Y))) X))))
             CATS))
           (LAM P (LAM X ((THINK P) X))))
>     (I)(THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S
        : (((LAM LF (LAM P (P LF))) I)
           (((LAM LF (LAM P (P LF)))
             ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
                (LAM X
                 (((LAM LF (LAM P (P LF))) YOU)
                  ((LAM X
                    ((LAM P (LAM X ((BELIEVE P) X)))
                     ((LAM X
                       (((LAM LF (LAM P (P LF))) MARY)
                        ((LAM X (LAM Y ((HATE X) Y))) X)))
                      X)))
                   X))))
               (LAM X
                (((LAM LF (LAM P (P LF))) JOHN)
                 ((LAM X (LAM Y ((LIKE X) Y))) X))))
              CATS))
            (LAM P (LAM X ((THINK P) X)))))

Final LF, normal-order evaluated: 

    ((THINK ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((LIKE CATS) JOHN))) I) =
    (THINK (AND (BELIEVE (HATE CATS MARY) YOU) (LIKE CATS JOHN)) I)

Derivation 82
--------------
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X))))
LEX   (CATS) := NP
        : CATS
>     (JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S
        : ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X
                 ((LAM P (LAM X ((BELIEVE P) X)))
                  ((LAM X
                    (((LAM LF (LAM P (P LF))) MARY)
                     ((LAM X (LAM Y ((HATE X) Y))) X)))
                   X)))
                X))))
            (LAM X
             (((LAM LF (LAM P (P LF))) JOHN)
              ((LAM X (LAM Y ((LIKE X) Y))) X))))
           CATS)
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_G2_789 (JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := (S\NP)\^((S\NP)/^S)
        : ((LAM LF (LAM P (P LF)))
           ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) YOU)
                ((LAM X
                  ((LAM P (LAM X ((BELIEVE P) X)))
                   ((LAM X
                     (((LAM LF (LAM P (P LF))) MARY)
                      ((LAM X (LAM Y ((HATE X) Y))) X)))
                    X)))
                 X))))
             (LAM X
              (((LAM LF (LAM P (P LF))) JOHN)
               ((LAM X (LAM Y ((LIKE X) Y))) X))))
            CATS))
<     (THINK)(JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S\NP
        : (((LAM LF (LAM P (P LF)))
            ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X
                   ((LAM P (LAM X ((BELIEVE P) X)))
                    ((LAM X
                      (((LAM LF (LAM P (P LF))) MARY)
                       ((LAM X (LAM Y ((HATE X) Y))) X)))
                     X)))
                  X))))
              (LAM X
               (((LAM LF (LAM P (P LF))) JOHN)
                ((LAM X (LAM Y ((LIKE X) Y))) X))))
             CATS))
           (LAM P (LAM X ((THINK P) X))))
>     (I)(THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S
        : (((LAM LF (LAM P (P LF))) I)
           (((LAM LF (LAM P (P LF)))
             ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
                (LAM X
                 (((LAM LF (LAM P (P LF))) YOU)
                  ((LAM X
                    ((LAM P (LAM X ((BELIEVE P) X)))
                     ((LAM X
                       (((LAM LF (LAM P (P LF))) MARY)
                        ((LAM X (LAM Y ((HATE X) Y))) X)))
                      X)))
                   X))))
               (LAM X
                (((LAM LF (LAM P (P LF))) JOHN)
                 ((LAM X (LAM Y ((LIKE X) Y))) X))))
              CATS))
            (LAM P (LAM X ((THINK P) X)))))

Final LF, normal-order evaluated: 

    ((THINK ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((LIKE CATS) JOHN))) I) =
    (THINK (AND (BELIEVE (HATE CATS MARY) YOU) (LIKE CATS JOHN)) I)

Derivation 119
--------------
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X))))
>B    (THINK)(JOHN LIKES AND YOU BELIEVE MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((THINK P) X)))
            ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X
                   ((LAM P (LAM X ((BELIEVE P) X)))
                    ((LAM X
                      (((LAM LF (LAM P (P LF))) MARY)
                       ((LAM X (LAM Y ((HATE X) Y))) X)))
                     X)))
                  X))))
              (LAM X
               (((LAM LF (LAM P (P LF))) JOHN)
                ((LAM X (LAM Y ((LIKE X) Y))) X))))
             X)))
_P2_805 (CATS) := (S\NP)\^((S\NP)/^NP)
        : ((LAM LF (LAM P (P LF))) CATS)
<     (THINK JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S\NP
        : (((LAM LF (LAM P (P LF))) CATS)
           (LAM X
            ((LAM P (LAM X ((THINK P) X)))
             ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
                (LAM X
                 (((LAM LF (LAM P (P LF))) YOU)
                  ((LAM X
                    ((LAM P (LAM X ((BELIEVE P) X)))
                     ((LAM X
                       (((LAM LF (LAM P (P LF))) MARY)
                        ((LAM X (LAM Y ((HATE X) Y))) X)))
                      X)))
                   X))))
               (LAM X
                (((LAM LF (LAM P (P LF))) JOHN)
                 ((LAM X (LAM Y ((LIKE X) Y))) X))))
              X))))
>     (I)(THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S
        : (((LAM LF (LAM P (P LF))) I)
           (((LAM LF (LAM P (P LF))) CATS)
            (LAM X
             ((LAM P (LAM X ((THINK P) X)))
              ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
                 (LAM X
                  (((LAM LF (LAM P (P LF))) YOU)
                   ((LAM X
                     ((LAM P (LAM X ((BELIEVE P) X)))
                      ((LAM X
                        (((LAM LF (LAM P (P LF))) MARY)
                         ((LAM X (LAM Y ((HATE X) Y))) X)))
                       X)))
                    X))))
                (LAM X
                 (((LAM LF (LAM P (P LF))) JOHN)
                  ((LAM X (LAM Y ((LIKE X) Y))) X))))
               X)))))

Final LF, normal-order evaluated: 

    ((THINK ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((LIKE CATS) JOHN))) I) =
    (THINK (AND (BELIEVE (HATE CATS MARY) YOU) (LIKE CATS JOHN)) I)

Derivation 120
--------------
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X))))
>B    (THINK)(JOHN LIKES AND YOU BELIEVE MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((THINK P) X)))
            ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X
                   ((LAM P (LAM X ((BELIEVE P) X)))
                    ((LAM X
                      (((LAM LF (LAM P (P LF))) MARY)
                       ((LAM X (LAM Y ((HATE X) Y))) X)))
                     X)))
                  X))))
              (LAM X
               (((LAM LF (LAM P (P LF))) JOHN)
                ((LAM X (LAM Y ((LIKE X) Y))) X))))
             X)))
_P2_805 (CATS) := (S\NP)\^((S\NP)/^NP)
        : ((LAM LF (LAM P (P LF))) CATS)
<     (THINK JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S\NP
        : (((LAM LF (LAM P (P LF))) CATS)
           (LAM X
            ((LAM P (LAM X ((THINK P) X)))
             ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
                (LAM X
                 (((LAM LF (LAM P (P LF))) YOU)
                  ((LAM X
                    ((LAM P (LAM X ((BELIEVE P) X)))
                     ((LAM X
                       (((LAM LF (LAM P (P LF))) MARY)
                        ((LAM X (LAM Y ((HATE X) Y))) X)))
                      X)))
                   X))))
               (LAM X
                (((LAM LF (LAM P (P LF))) JOHN)
                 ((LAM X (LAM Y ((LIKE X) Y))) X))))
              X))))
>     (I)(THINK JOHN LIKES AND YOU BELIEVE MARY HATES CATS) := S
        : (((LAM LF (LAM P (P LF))) I)
           (((LAM LF (LAM P (P LF))) CATS)
            (LAM X
             ((LAM P (LAM X ((THINK P) X)))
              ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
                 (LAM X
                  (((LAM LF (LAM P (P LF))) YOU)
                   ((LAM X
                     ((LAM P (LAM X ((BELIEVE P) X)))
                      ((LAM X
                        (((LAM LF (LAM P (P LF))) MARY)
                         ((LAM X (LAM Y ((HATE X) Y))) X)))
                       X)))
                    X))))
                (LAM X
                 (((LAM LF (LAM P (P LF))) JOHN)
                  ((LAM X (LAM Y ((LIKE X) Y))) X))))
               X)))))

Final LF, normal-order evaluated: 

    ((THINK ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((LIKE CATS) JOHN))) I) =
    (THINK (AND (BELIEVE (HATE CATS MARY) YOU) (LIKE CATS JOHN)) I)

Derivation 157
--------------
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
>B    (THINK)(JOHN LIKES) := (S\NP)/NP
        : (LAM X
           ((LAM P (LAM X ((THINK P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) JOHN)
               ((LAM X (LAM Y ((LIKE X) Y))) X)))
             X)))
>B    (I)(THINK JOHN LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) I)
            ((LAM X
              ((LAM P (LAM X ((THINK P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) JOHN)
                  ((LAM X (LAM Y ((LIKE X) Y))) X)))
                X)))
             X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (I THINK JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) I)
             ((LAM X
               ((LAM P (LAM X ((THINK P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) JOHN)
                   ((LAM X (LAM Y ((LIKE X) Y))) X)))
                 X)))
              X))))
LEX   (CATS) := NP
        : CATS
>     (I THINK JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S
        : ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X
                 ((LAM P (LAM X ((BELIEVE P) X)))
                  ((LAM X
                    (((LAM LF (LAM P (P LF))) MARY)
                     ((LAM X (LAM Y ((HATE X) Y))) X)))
                   X)))
                X))))
            (LAM X
             (((LAM LF (LAM P (P LF))) I)
              ((LAM X
                ((LAM P (LAM X ((THINK P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) JOHN)
                    ((LAM X (LAM Y ((LIKE X) Y))) X)))
                  X)))
               X))))
           CATS)

Final LF, normal-order evaluated: 

    ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((THINK ((LIKE CATS) JOHN)) I)) =
    (AND (BELIEVE (HATE CATS MARY) YOU) (THINK (LIKE CATS JOHN) I))

Derivation 158
--------------
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (THINK) := (S\NP)/^S
        : (LAM P (LAM X ((THINK P) X)))
_P2_807 (JOHN) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) JOHN)
LEX   (LIKES) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (JOHN)(LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) JOHN) ((LAM X (LAM Y ((LIKE X) Y))) X)))
>B    (THINK)(JOHN LIKES) := (S\NP)/NP
        : (LAM X
           ((LAM P (LAM X ((THINK P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) JOHN)
               ((LAM X (LAM Y ((LIKE X) Y))) X)))
             X)))
>B    (I)(THINK JOHN LIKES) := S/NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) I)
            ((LAM X
              ((LAM P (LAM X ((THINK P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) JOHN)
                  ((LAM X (LAM Y ((LIKE X) Y))) X)))
                X)))
             X)))
LEX   (AND) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (BELIEVE) := (S\NP)/^S
        : (LAM P (LAM X ((BELIEVE P) X)))
_P2_807 (MARY) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) MARY)
LEX   (HATES) := (S\NP)/^NP
        : (LAM X (LAM Y ((HATE X) Y)))
>B    (MARY)(HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MARY) ((LAM X (LAM Y ((HATE X) Y))) X)))
>B    (BELIEVE)(MARY HATES) := (S\NP)/^NP
        : (LAM X
           ((LAM P (LAM X ((BELIEVE P) X)))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MARY)
               ((LAM X (LAM Y ((HATE X) Y))) X)))
             X)))
>B    (YOU)(BELIEVE MARY HATES) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X
              ((LAM P (LAM X ((BELIEVE P) X)))
               ((LAM X
                 (((LAM LF (LAM P (P LF))) MARY)
                  ((LAM X (LAM Y ((HATE X) Y))) X)))
                X)))
             X)))
>     (AND)(YOU BELIEVE MARY HATES) := (S/^NP)\(S/^NP)
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X
               ((LAM P (LAM X ((BELIEVE P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) MARY)
                   ((LAM X (LAM Y ((HATE X) Y))) X)))
                 X)))
              X))))
<     (I THINK JOHN LIKES)(AND YOU BELIEVE MARY HATES) := S/^NP
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X
                ((LAM P (LAM X ((BELIEVE P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) MARY)
                    ((LAM X (LAM Y ((HATE X) Y))) X)))
                  X)))
               X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) I)
             ((LAM X
               ((LAM P (LAM X ((THINK P) X)))
                ((LAM X
                  (((LAM LF (LAM P (P LF))) JOHN)
                   ((LAM X (LAM Y ((LIKE X) Y))) X)))
                 X)))
              X))))
LEX   (CATS) := NP
        : CATS
>     (I THINK JOHN LIKES AND YOU BELIEVE MARY HATES)(CATS) := S
        : ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X
                 ((LAM P (LAM X ((BELIEVE P) X)))
                  ((LAM X
                    (((LAM LF (LAM P (P LF))) MARY)
                     ((LAM X (LAM Y ((HATE X) Y))) X)))
                   X)))
                X))))
            (LAM X
             (((LAM LF (LAM P (P LF))) I)
              ((LAM X
                ((LAM P (LAM X ((THINK P) X)))
                 ((LAM X
                   (((LAM LF (LAM P (P LF))) JOHN)
                    ((LAM X (LAM Y ((LIKE X) Y))) X)))
                  X)))
               X))))
           CATS)

Final LF, normal-order evaluated: 

    ((AND ((BELIEVE ((HATE CATS) MARY)) YOU)) ((THINK ((LIKE CATS) JOHN)) I)) =
    (AND (BELIEVE (HATE CATS MARY) YOU) (THINK (LIKE CATS JOHN) I))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (this book I LIKE) onto S



Derivation 1
--------------
LEX   (this book) := S/(S/NP)
        : (LAM P ((AND (P BOOK)) (TOPIC BOOK)))
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (LIKE) := (S\NP)/^NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (I)(LIKE) := S/^NP
        : (LAM X (((LAM LF (LAM P (P LF))) I) ((LAM X (LAM Y ((LIKE X) Y))) X)))
>     ("this book")(I LIKE) := S
        : ((LAM P ((AND (P BOOK)) (TOPIC BOOK)))
           (LAM X
            (((LAM LF (LAM P (P LF))) I) ((LAM X (LAM Y ((LIKE X) Y))) X))))

Final LF, normal-order evaluated: 

    ((AND ((LIKE BOOK) I)) (TOPIC BOOK)) =
    (AND (LIKE BOOK I) (TOPIC BOOK))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (I PICKED THE BOOK UP) onto S



Derivation 1
--------------
LEX   (I) := NP
        : I
LEX   (PICKED) := ((S\NP)/(UP))/^NP
        : (LAM Y
           (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z))))
LEX   (THE) := NP/^N
        : (LAM X (DEF X))
LEX   (BOOK) := N
        : BOOK
>     (THE)(BOOK) := NP
        : ((LAM X (DEF X)) BOOK)
>     (PICKED)(THE BOOK) := (S\NP)/(UP)
        : ((LAM Y
            (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z))))
           ((LAM X (DEF X)) BOOK))
LEX   (UP) := ((S\NP)\(S\NP))/NP
        : (LAM X (LAM P (UP (P X))))
>     (PICKED THE BOOK)(UP) := S\NP
        : (((LAM Y
             (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z))))
            ((LAM X (DEF X)) BOOK))
           (LAM X (LAM P (UP (P X)))))
<     (I)(PICKED THE BOOK UP) := S
        : ((((LAM Y
              (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z))))
             ((LAM X (DEF X)) BOOK))
            (LAM X (LAM P (UP (P X)))))
           I)

Final LF, normal-order evaluated: 

    ((CAUSE
      (INIT ((((HOLD _) (REACH (LAM X (LAM P (UP (P X)))))) (DEF BOOK)) I)))
     I) =
    (CAUSE (INIT (HOLD _ (REACH (\ X . \ P . UP (P X))) (DEF BOOK) I)) I)

Derivation 2
--------------
LEX   (THE) := NP/^N
        : (LAM X (DEF X))
LEX   (BOOK) := N
        : BOOK
>     (THE)(BOOK) := NP
        : ((LAM X (DEF X)) BOOK)
LEX   (I) := NP
        : I
LEX   (PICKED) := ((S\NP)/(UP))/^NP
        : (LAM Y
           (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z))))
_G2_784 (THE BOOK) := ((S\NP)/(UP))\^(((S\NP)/(UP))/^NP)
        : ((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
<     (PICKED)(THE BOOK) := (S\NP)/(UP)
        : (((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
           (LAM Y
            (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z)))))
LEX   (UP) := ((S\NP)\(S\NP))/NP
        : (LAM X (LAM P (UP (P X))))
>     (PICKED THE BOOK)(UP) := S\NP
        : ((((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
            (LAM Y
             (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z)))))
           (LAM X (LAM P (UP (P X)))))
<     (I)(PICKED THE BOOK UP) := S
        : (((((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
             (LAM Y
              (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z)))))
            (LAM X (LAM P (UP (P X)))))
           I)

Final LF, normal-order evaluated: 

    ((CAUSE
      (INIT ((((HOLD _) (REACH (LAM X (LAM P (UP (P X)))))) (DEF BOOK)) I)))
     I) =
    (CAUSE (INIT (HOLD _ (REACH (\ X . \ P . UP (P X))) (DEF BOOK) I)) I)

Derivation 3
--------------
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (PICKED) := ((S\NP)/(UP))/^NP
        : (LAM Y
           (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z))))
LEX   (THE) := NP/^N
        : (LAM X (DEF X))
LEX   (BOOK) := N
        : BOOK
>     (THE)(BOOK) := NP
        : ((LAM X (DEF X)) BOOK)
>     (PICKED)(THE BOOK) := (S\NP)/(UP)
        : ((LAM Y
            (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z))))
           ((LAM X (DEF X)) BOOK))
LEX   (UP) := ((S\NP)\(S\NP))/NP
        : (LAM X (LAM P (UP (P X))))
>     (PICKED THE BOOK)(UP) := S\NP
        : (((LAM Y
             (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z))))
            ((LAM X (DEF X)) BOOK))
           (LAM X (LAM P (UP (P X)))))
>     (I)(PICKED THE BOOK UP) := S
        : (((LAM LF (LAM P (P LF))) I)
           (((LAM Y
              (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z))))
             ((LAM X (DEF X)) BOOK))
            (LAM X (LAM P (UP (P X))))))

Final LF, normal-order evaluated: 

    ((CAUSE
      (INIT ((((HOLD _) (REACH (LAM X (LAM P (UP (P X)))))) (DEF BOOK)) I)))
     I) =
    (CAUSE (INIT (HOLD _ (REACH (\ X . \ P . UP (P X))) (DEF BOOK) I)) I)

Derivation 4
--------------
LEX   (THE) := NP/^N
        : (LAM X (DEF X))
LEX   (BOOK) := N
        : BOOK
>     (THE)(BOOK) := NP
        : ((LAM X (DEF X)) BOOK)
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (PICKED) := ((S\NP)/(UP))/^NP
        : (LAM Y
           (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z))))
_G2_784 (THE BOOK) := ((S\NP)/(UP))\^(((S\NP)/(UP))/^NP)
        : ((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
<     (PICKED)(THE BOOK) := (S\NP)/(UP)
        : (((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
           (LAM Y
            (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z)))))
LEX   (UP) := ((S\NP)\(S\NP))/NP
        : (LAM X (LAM P (UP (P X))))
>     (PICKED THE BOOK)(UP) := S\NP
        : ((((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
            (LAM Y
             (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z)))))
           (LAM X (LAM P (UP (P X)))))
>     (I)(PICKED THE BOOK UP) := S
        : (((LAM LF (LAM P (P LF))) I)
           ((((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
             (LAM Y
              (LAM X (LAM Z ((CAUSE (INIT ((((HOLD _) (REACH X)) Y) Z))) Z)))))
            (LAM X (LAM P (UP (P X))))))

Final LF, normal-order evaluated: 

    ((CAUSE
      (INIT ((((HOLD _) (REACH (LAM X (LAM P (UP (P X)))))) (DEF BOOK)) I)))
     I) =
    (CAUSE (INIT (HOLD _ (REACH (\ X . \ P . UP (P X))) (DEF BOOK) I)) I)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (I PICKED UP THE BOOK) onto S



Derivation 1
--------------
LEX   (I) := NP
        : I
LEX   (PICKED) := ((S\NP)/^NP)/(UP)
        : (LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
LEX   (UP) := ((S\NP)\(S\NP))/NP
        : (LAM X (LAM P (UP (P X))))
>     (PICKED)(UP) := (S\NP)/^NP
        : ((LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
           (LAM X (LAM P (UP (P X)))))
LEX   (THE) := NP/^N
        : (LAM X (DEF X))
LEX   (BOOK) := N
        : BOOK
>     (THE)(BOOK) := NP
        : ((LAM X (DEF X)) BOOK)
>     (PICKED UP)(THE BOOK) := S\NP
        : (((LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
            (LAM X (LAM P (UP (P X)))))
           ((LAM X (DEF X)) BOOK))
<     (I)(PICKED UP THE BOOK) := S
        : ((((LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
             (LAM X (LAM P (UP (P X)))))
            ((LAM X (DEF X)) BOOK))
           I)

Final LF, normal-order evaluated: 

    ((((PICK _) (LAM X (LAM P (UP (P X))))) (DEF BOOK)) I) =
    (PICK _ (\ X . \ P . UP (P X)) (DEF BOOK) I)

Derivation 2
--------------
LEX   (THE) := NP/^N
        : (LAM X (DEF X))
LEX   (BOOK) := N
        : BOOK
>     (THE)(BOOK) := NP
        : ((LAM X (DEF X)) BOOK)
LEX   (I) := NP
        : I
LEX   (PICKED) := ((S\NP)/^NP)/(UP)
        : (LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
LEX   (UP) := ((S\NP)\(S\NP))/NP
        : (LAM X (LAM P (UP (P X))))
>     (PICKED)(UP) := (S\NP)/^NP
        : ((LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
           (LAM X (LAM P (UP (P X)))))
_P2_805 (THE BOOK) := (S\NP)\^((S\NP)/^NP)
        : ((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
<     (PICKED UP)(THE BOOK) := S\NP
        : (((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
           ((LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
            (LAM X (LAM P (UP (P X))))))
<     (I)(PICKED UP THE BOOK) := S
        : ((((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
            ((LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
             (LAM X (LAM P (UP (P X))))))
           I)

Final LF, normal-order evaluated: 

    ((((PICK _) (LAM X (LAM P (UP (P X))))) (DEF BOOK)) I) =
    (PICK _ (\ X . \ P . UP (P X)) (DEF BOOK) I)

Derivation 4
--------------
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (PICKED) := ((S\NP)/^NP)/(UP)
        : (LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
LEX   (UP) := ((S\NP)\(S\NP))/NP
        : (LAM X (LAM P (UP (P X))))
>     (PICKED)(UP) := (S\NP)/^NP
        : ((LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
           (LAM X (LAM P (UP (P X)))))
LEX   (THE) := NP/^N
        : (LAM X (DEF X))
LEX   (BOOK) := N
        : BOOK
>     (THE)(BOOK) := NP
        : ((LAM X (DEF X)) BOOK)
>     (PICKED UP)(THE BOOK) := S\NP
        : (((LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
            (LAM X (LAM P (UP (P X)))))
           ((LAM X (DEF X)) BOOK))
>     (I)(PICKED UP THE BOOK) := S
        : (((LAM LF (LAM P (P LF))) I)
           (((LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
             (LAM X (LAM P (UP (P X)))))
            ((LAM X (DEF X)) BOOK)))

Final LF, normal-order evaluated: 

    ((((PICK _) (LAM X (LAM P (UP (P X))))) (DEF BOOK)) I) =
    (PICK _ (\ X . \ P . UP (P X)) (DEF BOOK) I)

Derivation 5
--------------
LEX   (THE) := NP/^N
        : (LAM X (DEF X))
LEX   (BOOK) := N
        : BOOK
>     (THE)(BOOK) := NP
        : ((LAM X (DEF X)) BOOK)
_P2_807 (I) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) I)
LEX   (PICKED) := ((S\NP)/^NP)/(UP)
        : (LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
LEX   (UP) := ((S\NP)\(S\NP))/NP
        : (LAM X (LAM P (UP (P X))))
>     (PICKED)(UP) := (S\NP)/^NP
        : ((LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
           (LAM X (LAM P (UP (P X)))))
_P2_805 (THE BOOK) := (S\NP)\^((S\NP)/^NP)
        : ((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
<     (PICKED UP)(THE BOOK) := S\NP
        : (((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
           ((LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
            (LAM X (LAM P (UP (P X))))))
>     (I)(PICKED UP THE BOOK) := S
        : (((LAM LF (LAM P (P LF))) I)
           (((LAM LF (LAM P (P LF))) ((LAM X (DEF X)) BOOK))
            ((LAM X (LAM Y (LAM Z ((((PICK _) X) Y) Z))))
             (LAM X (LAM P (UP (P X)))))))

Final LF, normal-order evaluated: 

    ((((PICK _) (LAM X (LAM P (UP (P X))))) (DEF BOOK)) I) =
    (PICK _ (\ X . \ P . UP (P X)) (DEF BOOK) I)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (THE BEANS THAT YOU SPILLED CAUSED quite a stir) onto S



Derivation 1
--------------
LEX   (THE) := NP/^N
        : (LAM X (DEF X))
LEX   (BEANS) := N
        : BEANS
LEX   (THAT) := (N\N)/(S/NP)
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (SPILLED) := (S\NP)/^NP
        : (LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y)))
>B    (YOU)(SPILLED) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X)))
>     (THAT)(YOU SPILLED) := N\N
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
<     (BEANS)(THAT YOU SPILLED) := N
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
           BEANS)
>     (THE)(BEANS THAT YOU SPILLED) := NP
        : ((LAM X (DEF X))
           (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
            BEANS))
LEX   (CAUSED) := (S\NP)/^NP
        : (LAM X (LAM Y ((CAUSE X) Y)))
LEX   (quite a stir) := NP
        : STIR
>     (CAUSED)("quite a stir") := S\NP
        : ((LAM X (LAM Y ((CAUSE X) Y))) STIR)
<     (THE BEANS THAT YOU SPILLED)(CAUSED "quite a stir") := S
        : (((LAM X (LAM Y ((CAUSE X) Y))) STIR)
           ((LAM X (DEF X))
            (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) YOU)
                ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
             BEANS)))

Final LF, normal-order evaluated: 

    ((CAUSE STIR)
     (DEF (LAM X ((AND ((((DIVULGE _) (PUBLIC X)) SECRET) YOU)) (BEANS X))))) =
    (CAUSE STIR (DEF (\ X . AND (DIVULGE _ (PUBLIC X) SECRET YOU) (BEANS X))))

Derivation 2
--------------
LEX   (THE) := NP/^N
        : (LAM X (DEF X))
LEX   (BEANS) := N
        : BEANS
LEX   (THAT) := (N\N)/(S/NP)
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (SPILLED) := (S\NP)/^NP
        : (LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y)))
>B    (YOU)(SPILLED) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X)))
>     (THAT)(YOU SPILLED) := N\N
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
<     (BEANS)(THAT YOU SPILLED) := N
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
           BEANS)
>     (THE)(BEANS THAT YOU SPILLED) := NP
        : ((LAM X (DEF X))
           (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
            BEANS))
LEX   (CAUSED) := (S\NP)/^NP
        : (LAM X (LAM Y ((CAUSE X) Y)))
_P2_805 (quite a stir) := (S\NP)\^((S\NP)/^NP)
        : ((LAM LF (LAM P (P LF))) STIR)
<     (CAUSED)("quite a stir") := S\NP
        : (((LAM LF (LAM P (P LF))) STIR) (LAM X (LAM Y ((CAUSE X) Y))))
<     (THE BEANS THAT YOU SPILLED)(CAUSED "quite a stir") := S
        : ((((LAM LF (LAM P (P LF))) STIR) (LAM X (LAM Y ((CAUSE X) Y))))
           ((LAM X (DEF X))
            (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) YOU)
                ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
             BEANS)))

Final LF, normal-order evaluated: 

    ((CAUSE STIR)
     (DEF (LAM X ((AND ((((DIVULGE _) (PUBLIC X)) SECRET) YOU)) (BEANS X))))) =
    (CAUSE STIR (DEF (\ X . AND (DIVULGE _ (PUBLIC X) SECRET YOU) (BEANS X))))

Derivation 3
--------------
LEX   (THE) := NP/^N
        : (LAM X (DEF X))
LEX   (BEANS) := N
        : BEANS
LEX   (THAT) := (N\N)/(S/NP)
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (SPILLED) := (S\NP)/^NP
        : (LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y)))
>B    (YOU)(SPILLED) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X)))
>     (THAT)(YOU SPILLED) := N\N
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
<     (BEANS)(THAT YOU SPILLED) := N
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
           BEANS)
>     (THE)(BEANS THAT YOU SPILLED) := NP
        : ((LAM X (DEF X))
           (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
            BEANS))
_P2_807 (THE BEANS THAT YOU SPILLED) := S/(S\NP)
        : ((LAM LF (LAM P (P LF)))
           ((LAM X (DEF X))
            (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) YOU)
                ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
             BEANS)))
LEX   (CAUSED) := (S\NP)/^NP
        : (LAM X (LAM Y ((CAUSE X) Y)))
LEX   (quite a stir) := NP
        : STIR
>     (CAUSED)("quite a stir") := S\NP
        : ((LAM X (LAM Y ((CAUSE X) Y))) STIR)
>     (THE BEANS THAT YOU SPILLED)(CAUSED "quite a stir") := S
        : (((LAM LF (LAM P (P LF)))
            ((LAM X (DEF X))
             (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
              BEANS)))
           ((LAM X (LAM Y ((CAUSE X) Y))) STIR))

Final LF, normal-order evaluated: 

    ((CAUSE STIR)
     (DEF (LAM X ((AND ((((DIVULGE _) (PUBLIC X)) SECRET) YOU)) (BEANS X))))) =
    (CAUSE STIR (DEF (\ X . AND (DIVULGE _ (PUBLIC X) SECRET YOU) (BEANS X))))

Derivation 4
--------------
LEX   (THE) := NP/^N
        : (LAM X (DEF X))
LEX   (BEANS) := N
        : BEANS
LEX   (THAT) := (N\N)/(S/NP)
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_P2_807 (YOU) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) YOU)
LEX   (SPILLED) := (S\NP)/^NP
        : (LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y)))
>B    (YOU)(SPILLED) := S/^NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) YOU)
            ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X)))
>     (THAT)(YOU SPILLED) := N\N
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) YOU)
             ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
<     (BEANS)(THAT YOU SPILLED) := N
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) YOU)
              ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
           BEANS)
>     (THE)(BEANS THAT YOU SPILLED) := NP
        : ((LAM X (DEF X))
           (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) YOU)
               ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
            BEANS))
_P2_807 (THE BEANS THAT YOU SPILLED) := S/(S\NP)
        : ((LAM LF (LAM P (P LF)))
           ((LAM X (DEF X))
            (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) YOU)
                ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
             BEANS)))
LEX   (CAUSED) := (S\NP)/^NP
        : (LAM X (LAM Y ((CAUSE X) Y)))
_P2_805 (quite a stir) := (S\NP)\^((S\NP)/^NP)
        : ((LAM LF (LAM P (P LF))) STIR)
<     (CAUSED)("quite a stir") := S\NP
        : (((LAM LF (LAM P (P LF))) STIR) (LAM X (LAM Y ((CAUSE X) Y))))
>     (THE BEANS THAT YOU SPILLED)(CAUSED "quite a stir") := S
        : (((LAM LF (LAM P (P LF)))
            ((LAM X (DEF X))
             (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
               (LAM X
                (((LAM LF (LAM P (P LF))) YOU)
                 ((LAM X (LAM Y ((((DIVULGE _) (PUBLIC X)) SECRET) Y))) X))))
              BEANS)))
           (((LAM LF (LAM P (P LF))) STIR) (LAM X (LAM Y ((CAUSE X) Y)))))

Final LF, normal-order evaluated: 

    ((CAUSE STIR)
     (DEF (LAM X ((AND ((((DIVULGE _) (PUBLIC X)) SECRET) YOU)) (BEANS X))))) =
    (CAUSE STIR (DEF (\ X . AND (DIVULGE _ (PUBLIC X) SECRET YOU) (BEANS X))))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (SHE THINKS HARRY AND BARRY LIKES MARY) onto S


Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
======================= l o a d i n g =======================================

Project g file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  CCG grammar source       : g.ccg
          token form       : g.lisptokens
  Compiled/loaded grammar  : g.ccg.lisp
       *CCG-GRAMMAR*       : 116 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

Summary of compiling type-raising for grammar   : g.ccg.lisp
Log of warnings and errors                      : ch-err.log (1 entries) 
Number of lexical entries                       : 116
Number of lexical functions considered          : 7
Number of second-order case functions generated : 6
Number of paradigmatic functions out of them    : 4
Use (mergesave-tr <pn>) to merge and save the rules
 with current grammar to <pn>.ccg.lisp
Type-raising rules added at the end of *ccg-grammar*
compiled, subsumed and saved.
======================= l o a d i n g =======================================

Project g-ch file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  Compiled/loaded grammar  : g-ch.ccg.lisp
       *CCG-GRAMMAR*       : 120 entries
   *LEX-RULES-TABLE*       : 4 entries
=============================================================================

Derivations of (ZHANGSAN XIHUAN DANSHI LISI BU XIHUAN zhe-ben shu) onto S



Derivation 1
--------------
LEX   (ZHANGSAN) := S/(S/NP)
        : (LAM P ((AND (P Z)) (TOPIC Z)))
LEX   (XIHUAN) := S/NP
        : (LAM X ((LIKE X) TOP))
LEX   (DANSHI) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
LEX   (LISI) := NP
        : LISI
LEX   (BU) := (S\NP)/(S\NP)
        : (LAM P (LAM X (NEG (P X))))
LEX   (XIHUAN) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
LEX   (zhe-ben shu) := NP
        : (DEF BOOK)
>     (XIHUAN)("zhe-ben shu") := S\NP
        : ((LAM X (LAM Y ((LIKE X) Y))) (DEF BOOK))
>     (BU)(XIHUAN "zhe-ben shu") := S\NP
        : ((LAM P (LAM X (NEG (P X))))
           ((LAM X (LAM Y ((LIKE X) Y))) (DEF BOOK)))
<     (LISI)(BU XIHUAN "zhe-ben shu") := S
        : (((LAM P (LAM X (NEG (P X))))
            ((LAM X (LAM Y ((LIKE X) Y))) (DEF BOOK)))
           LISI)
>     (DANSHI)(LISI BU XIHUAN "zhe-ben shu") := S\S
        : ((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
           (((LAM P (LAM X (NEG (P X))))
             ((LAM X (LAM Y ((LIKE X) Y))) (DEF BOOK)))
            LISI))
<Bx   (XIHUAN)(DANSHI LISI BU XIHUAN "zhe-ben shu") := S/NP
        : (LAM X
           (((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
             (((LAM P (LAM X (NEG (P X))))
               ((LAM X (LAM Y ((LIKE X) Y))) (DEF BOOK)))
              LISI))
            ((LAM X ((LIKE X) TOP)) X)))
>     (ZHANGSAN)(XIHUAN DANSHI LISI BU XIHUAN "zhe-ben shu") := S
        : ((LAM P ((AND (P Z)) (TOPIC Z)))
           (LAM X
            (((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
              (((LAM P (LAM X (NEG (P X))))
                ((LAM X (LAM Y ((LIKE X) Y))) (DEF BOOK)))
               LISI))
             ((LAM X ((LIKE X) TOP)) X))))

Final LF, normal-order evaluated: 

    ((AND
      (LAM X ((BUT ((NEG ((LIKE (DEF BOOK)) LISI)) X)) (((LIKE Z) TOP) X))))
     (TOPIC Z)) =
    (AND (\ X . BUT (NEG (LIKE (DEF BOOK) LISI) X) (LIKE Z TOP X)) (TOPIC Z))

Derivation 2
--------------
LEX   (ZHANGSAN) := S/(S/NP)
        : (LAM P ((AND (P Z)) (TOPIC Z)))
LEX   (XIHUAN) := S/NP
        : (LAM X ((LIKE X) TOP))
LEX   (DANSHI) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
LEX   (LISI) := NP
        : LISI
LEX   (BU) := (S\NP)/(S\NP)
        : (LAM P (LAM X (NEG (P X))))
LEX   (XIHUAN) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
_G2_909 (zhe-ben shu) := (S\NP)\((S\NP)/NP)
        : ((LAM LF (LAM P (P LF))) (DEF BOOK))
<     (XIHUAN)("zhe-ben shu") := S\NP
        : (((LAM LF (LAM P (P LF))) (DEF BOOK)) (LAM X (LAM Y ((LIKE X) Y))))
>     (BU)(XIHUAN "zhe-ben shu") := S\NP
        : ((LAM P (LAM X (NEG (P X))))
           (((LAM LF (LAM P (P LF))) (DEF BOOK)) (LAM X (LAM Y ((LIKE X) Y)))))
<     (LISI)(BU XIHUAN "zhe-ben shu") := S
        : (((LAM P (LAM X (NEG (P X))))
            (((LAM LF (LAM P (P LF))) (DEF BOOK))
             (LAM X (LAM Y ((LIKE X) Y)))))
           LISI)
>     (DANSHI)(LISI BU XIHUAN "zhe-ben shu") := S\S
        : ((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
           (((LAM P (LAM X (NEG (P X))))
             (((LAM LF (LAM P (P LF))) (DEF BOOK))
              (LAM X (LAM Y ((LIKE X) Y)))))
            LISI))
<Bx   (XIHUAN)(DANSHI LISI BU XIHUAN "zhe-ben shu") := S/NP
        : (LAM X
           (((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
             (((LAM P (LAM X (NEG (P X))))
               (((LAM LF (LAM P (P LF))) (DEF BOOK))
                (LAM X (LAM Y ((LIKE X) Y)))))
              LISI))
            ((LAM X ((LIKE X) TOP)) X)))
>     (ZHANGSAN)(XIHUAN DANSHI LISI BU XIHUAN "zhe-ben shu") := S
        : ((LAM P ((AND (P Z)) (TOPIC Z)))
           (LAM X
            (((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
              (((LAM P (LAM X (NEG (P X))))
                (((LAM LF (LAM P (P LF))) (DEF BOOK))
                 (LAM X (LAM Y ((LIKE X) Y)))))
               LISI))
             ((LAM X ((LIKE X) TOP)) X))))

Final LF, normal-order evaluated: 

    ((AND
      (LAM X ((BUT ((NEG ((LIKE (DEF BOOK)) LISI)) X)) (((LIKE Z) TOP) X))))
     (TOPIC Z)) =
    (AND (\ X . BUT (NEG (LIKE (DEF BOOK) LISI) X) (LIKE Z TOP X)) (TOPIC Z))

Derivation 3
--------------
LEX   (ZHANGSAN) := S/(S/NP)
        : (LAM P ((AND (P Z)) (TOPIC Z)))
LEX   (XIHUAN) := S/NP
        : (LAM X ((LIKE X) TOP))
LEX   (DANSHI) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
LEX   (LISI) := NP
        : LISI
LEX   (BU) := (S\NP)/(S\NP)
        : (LAM P (LAM X (NEG (P X))))
LEX   (XIHUAN) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (BU)(XIHUAN) := (S\NP)/NP
        : (LAM X ((LAM P (LAM X (NEG (P X)))) ((LAM X (LAM Y ((LIKE X) Y))) X)))
_G2_909 (zhe-ben shu) := (S\NP)\((S\NP)/NP)
        : ((LAM LF (LAM P (P LF))) (DEF BOOK))
<     (BU XIHUAN)("zhe-ben shu") := S\NP
        : (((LAM LF (LAM P (P LF))) (DEF BOOK))
           (LAM X
            ((LAM P (LAM X (NEG (P X)))) ((LAM X (LAM Y ((LIKE X) Y))) X))))
<     (LISI)(BU XIHUAN "zhe-ben shu") := S
        : ((((LAM LF (LAM P (P LF))) (DEF BOOK))
            (LAM X
             ((LAM P (LAM X (NEG (P X)))) ((LAM X (LAM Y ((LIKE X) Y))) X))))
           LISI)
>     (DANSHI)(LISI BU XIHUAN "zhe-ben shu") := S\S
        : ((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
           ((((LAM LF (LAM P (P LF))) (DEF BOOK))
             (LAM X
              ((LAM P (LAM X (NEG (P X)))) ((LAM X (LAM Y ((LIKE X) Y))) X))))
            LISI))
<Bx   (XIHUAN)(DANSHI LISI BU XIHUAN "zhe-ben shu") := S/NP
        : (LAM X
           (((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
             ((((LAM LF (LAM P (P LF))) (DEF BOOK))
               (LAM X
                ((LAM P (LAM X (NEG (P X))))
                 ((LAM X (LAM Y ((LIKE X) Y))) X))))
              LISI))
            ((LAM X ((LIKE X) TOP)) X)))
>     (ZHANGSAN)(XIHUAN DANSHI LISI BU XIHUAN "zhe-ben shu") := S
        : ((LAM P ((AND (P Z)) (TOPIC Z)))
           (LAM X
            (((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
              ((((LAM LF (LAM P (P LF))) (DEF BOOK))
                (LAM X
                 ((LAM P (LAM X (NEG (P X))))
                  ((LAM X (LAM Y ((LIKE X) Y))) X))))
               LISI))
             ((LAM X ((LIKE X) TOP)) X))))

Final LF, normal-order evaluated: 

    ((AND
      (LAM X ((BUT ((NEG ((LIKE (DEF BOOK)) LISI)) X)) (((LIKE Z) TOP) X))))
     (TOPIC Z)) =
    (AND (\ X . BUT (NEG (LIKE (DEF BOOK) LISI) X) (LIKE Z TOP X)) (TOPIC Z))

Derivation 4
--------------
LEX   (ZHANGSAN) := S/(S/NP)
        : (LAM P ((AND (P Z)) (TOPIC Z)))
LEX   (XIHUAN) := S/NP
        : (LAM X ((LIKE X) TOP))
>     (ZHANGSAN)(XIHUAN) := S
        : ((LAM P ((AND (P Z)) (TOPIC Z))) (LAM X ((LIKE X) TOP)))
LEX   (DANSHI) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
LEX   (LISI) := NP
        : LISI
LEX   (BU) := (S\NP)/(S\NP)
        : (LAM P (LAM X (NEG (P X))))
LEX   (XIHUAN) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
LEX   (zhe-ben shu) := NP
        : (DEF BOOK)
>     (XIHUAN)("zhe-ben shu") := S\NP
        : ((LAM X (LAM Y ((LIKE X) Y))) (DEF BOOK))
>     (BU)(XIHUAN "zhe-ben shu") := S\NP
        : ((LAM P (LAM X (NEG (P X))))
           ((LAM X (LAM Y ((LIKE X) Y))) (DEF BOOK)))
<     (LISI)(BU XIHUAN "zhe-ben shu") := S
        : (((LAM P (LAM X (NEG (P X))))
            ((LAM X (LAM Y ((LIKE X) Y))) (DEF BOOK)))
           LISI)
>     (DANSHI)(LISI BU XIHUAN "zhe-ben shu") := S\S
        : ((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
           (((LAM P (LAM X (NEG (P X))))
             ((LAM X (LAM Y ((LIKE X) Y))) (DEF BOOK)))
            LISI))
<     (ZHANGSAN XIHUAN)(DANSHI LISI BU XIHUAN "zhe-ben shu") := S
        : (((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
            (((LAM P (LAM X (NEG (P X))))
              ((LAM X (LAM Y ((LIKE X) Y))) (DEF BOOK)))
             LISI))
           ((LAM P ((AND (P Z)) (TOPIC Z))) (LAM X ((LIKE X) TOP))))

Final LF, normal-order evaluated: 

    (LAM X
     ((BUT ((NEG ((LIKE (DEF BOOK)) LISI)) X))
      (((AND ((LIKE Z) TOP)) (TOPIC Z)) X))) =
    (\ X . BUT (NEG (LIKE (DEF BOOK) LISI) X) (AND (LIKE Z TOP) (TOPIC Z) X))

Derivation 5
--------------
LEX   (ZHANGSAN) := S/(S/NP)
        : (LAM P ((AND (P Z)) (TOPIC Z)))
LEX   (XIHUAN) := S/NP
        : (LAM X ((LIKE X) TOP))
>     (ZHANGSAN)(XIHUAN) := S
        : ((LAM P ((AND (P Z)) (TOPIC Z))) (LAM X ((LIKE X) TOP)))
LEX   (DANSHI) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
LEX   (LISI) := NP
        : LISI
LEX   (BU) := (S\NP)/(S\NP)
        : (LAM P (LAM X (NEG (P X))))
LEX   (XIHUAN) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
_G2_909 (zhe-ben shu) := (S\NP)\((S\NP)/NP)
        : ((LAM LF (LAM P (P LF))) (DEF BOOK))
<     (XIHUAN)("zhe-ben shu") := S\NP
        : (((LAM LF (LAM P (P LF))) (DEF BOOK)) (LAM X (LAM Y ((LIKE X) Y))))
>     (BU)(XIHUAN "zhe-ben shu") := S\NP
        : ((LAM P (LAM X (NEG (P X))))
           (((LAM LF (LAM P (P LF))) (DEF BOOK)) (LAM X (LAM Y ((LIKE X) Y)))))
<     (LISI)(BU XIHUAN "zhe-ben shu") := S
        : (((LAM P (LAM X (NEG (P X))))
            (((LAM LF (LAM P (P LF))) (DEF BOOK))
             (LAM X (LAM Y ((LIKE X) Y)))))
           LISI)
>     (DANSHI)(LISI BU XIHUAN "zhe-ben shu") := S\S
        : ((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
           (((LAM P (LAM X (NEG (P X))))
             (((LAM LF (LAM P (P LF))) (DEF BOOK))
              (LAM X (LAM Y ((LIKE X) Y)))))
            LISI))
<     (ZHANGSAN XIHUAN)(DANSHI LISI BU XIHUAN "zhe-ben shu") := S
        : (((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
            (((LAM P (LAM X (NEG (P X))))
              (((LAM LF (LAM P (P LF))) (DEF BOOK))
               (LAM X (LAM Y ((LIKE X) Y)))))
             LISI))
           ((LAM P ((AND (P Z)) (TOPIC Z))) (LAM X ((LIKE X) TOP))))

Final LF, normal-order evaluated: 

    (LAM X
     ((BUT ((NEG ((LIKE (DEF BOOK)) LISI)) X))
      (((AND ((LIKE Z) TOP)) (TOPIC Z)) X))) =
    (\ X . BUT (NEG (LIKE (DEF BOOK) LISI) X) (AND (LIKE Z TOP) (TOPIC Z) X))

Derivation 6
--------------
LEX   (ZHANGSAN) := S/(S/NP)
        : (LAM P ((AND (P Z)) (TOPIC Z)))
LEX   (XIHUAN) := S/NP
        : (LAM X ((LIKE X) TOP))
>     (ZHANGSAN)(XIHUAN) := S
        : ((LAM P ((AND (P Z)) (TOPIC Z))) (LAM X ((LIKE X) TOP)))
LEX   (DANSHI) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
LEX   (LISI) := NP
        : LISI
LEX   (BU) := (S\NP)/(S\NP)
        : (LAM P (LAM X (NEG (P X))))
LEX   (XIHUAN) := (S\NP)/NP
        : (LAM X (LAM Y ((LIKE X) Y)))
>B    (BU)(XIHUAN) := (S\NP)/NP
        : (LAM X ((LAM P (LAM X (NEG (P X)))) ((LAM X (LAM Y ((LIKE X) Y))) X)))
_G2_909 (zhe-ben shu) := (S\NP)\((S\NP)/NP)
        : ((LAM LF (LAM P (P LF))) (DEF BOOK))
<     (BU XIHUAN)("zhe-ben shu") := S\NP
        : (((LAM LF (LAM P (P LF))) (DEF BOOK))
           (LAM X
            ((LAM P (LAM X (NEG (P X)))) ((LAM X (LAM Y ((LIKE X) Y))) X))))
<     (LISI)(BU XIHUAN "zhe-ben shu") := S
        : ((((LAM LF (LAM P (P LF))) (DEF BOOK))
            (LAM X
             ((LAM P (LAM X (NEG (P X)))) ((LAM X (LAM Y ((LIKE X) Y))) X))))
           LISI)
>     (DANSHI)(LISI BU XIHUAN "zhe-ben shu") := S\S
        : ((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
           ((((LAM LF (LAM P (P LF))) (DEF BOOK))
             (LAM X
              ((LAM P (LAM X (NEG (P X)))) ((LAM X (LAM Y ((LIKE X) Y))) X))))
            LISI))
<     (ZHANGSAN XIHUAN)(DANSHI LISI BU XIHUAN "zhe-ben shu") := S
        : (((LAM P (LAM Q (LAM X ((BUT (P X)) (Q X)))))
            ((((LAM LF (LAM P (P LF))) (DEF BOOK))
              (LAM X
               ((LAM P (LAM X (NEG (P X)))) ((LAM X (LAM Y ((LIKE X) Y))) X))))
             LISI))
           ((LAM P ((AND (P Z)) (TOPIC Z))) (LAM X ((LIKE X) TOP))))

Final LF, normal-order evaluated: 

    (LAM X
     ((BUT ((NEG ((LIKE (DEF BOOK)) LISI)) X))
      (((AND ((LIKE Z) TOP)) (TOPIC Z)) X))) =
    (\ X . BUT (NEG (LIKE (DEF BOOK) LISI) X) (AND (LIKE Z TOP) (TOPIC Z) X))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (TA DIGEI GEGE yi-hu jiu E2R JIEJIE yi-pan cai) onto S



Derivation 1
--------------
LEX   (TA) := NP
        : HESHE
LEX   (DIGEI) := ((S\NP)/NP)/NP
        : (LAM X (LAM Y (LAM Z (((GIVE X) Y) Z))))
_G2_907 (GEGE) := ((S\NP)/NP)\(((S\NP)/NP)/NP)
        : ((LAM LF (LAM P (P LF))) BROTHER)
_G2_909 (yi-hu jiu) := (S\NP)\((S\NP)/NP)
        : ((LAM LF (LAM P (P LF))) (ONE WINE))
<B    (GEGE)("yi-hu jiu") := (S\NP)\(((S\NP)/NP)/NP)
        : (LAM X
           (((LAM LF (LAM P (P LF))) (ONE WINE))
            (((LAM LF (LAM P (P LF))) BROTHER) X)))
LEX   (E2R) := (@X\@X)/@X
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
_G2_907 (JIEJIE) := ((S\NP)/NP)\(((S\NP)/NP)/NP)
        : ((LAM LF (LAM P (P LF))) SISTER)
_G2_909 (yi-pan cai) := (S\NP)\((S\NP)/NP)
        : ((LAM LF (LAM P (P LF))) (ONE DISH))
<B    (JIEJIE)("yi-pan cai") := (S\NP)\(((S\NP)/NP)/NP)
        : (LAM X
           (((LAM LF (LAM P (P LF))) (ONE DISH))
            (((LAM LF (LAM P (P LF))) SISTER) X)))
>     (E2R)(JIEJIE "yi-pan cai") := ((S\NP)\(((S\NP)/NP)/NP))\((S\NP)\(((S\NP)/NP)/NP))
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            (((LAM LF (LAM P (P LF))) (ONE DISH))
             (((LAM LF (LAM P (P LF))) SISTER) X))))
<     (GEGE "yi-hu jiu")(E2R JIEJIE "yi-pan cai") := (S\NP)\(((S\NP)/NP)/NP)
        : (((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             (((LAM LF (LAM P (P LF))) (ONE DISH))
              (((LAM LF (LAM P (P LF))) SISTER) X))))
           (LAM X
            (((LAM LF (LAM P (P LF))) (ONE WINE))
             (((LAM LF (LAM P (P LF))) BROTHER) X))))
<     (DIGEI)(GEGE "yi-hu jiu" E2R JIEJIE "yi-pan cai") := S\NP
        : ((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
             (LAM X
              (((LAM LF (LAM P (P LF))) (ONE DISH))
               (((LAM LF (LAM P (P LF))) SISTER) X))))
            (LAM X
             (((LAM LF (LAM P (P LF))) (ONE WINE))
              (((LAM LF (LAM P (P LF))) BROTHER) X))))
           (LAM X (LAM Y (LAM Z (((GIVE X) Y) Z)))))
<     (TA)(DIGEI GEGE "yi-hu jiu" E2R JIEJIE "yi-pan cai") := S
        : (((((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
              (LAM X
               (((LAM LF (LAM P (P LF))) (ONE DISH))
                (((LAM LF (LAM P (P LF))) SISTER) X))))
             (LAM X
              (((LAM LF (LAM P (P LF))) (ONE WINE))
               (((LAM LF (LAM P (P LF))) BROTHER) X))))
            (LAM X (LAM Y (LAM Z (((GIVE X) Y) Z)))))
           HESHE)

Final LF, normal-order evaluated: 

    (((AND (LAM Z (((GIVE SISTER) (ONE DISH)) Z)))
      (LAM Z (((GIVE BROTHER) (ONE WINE)) Z)))
     HESHE) =
    (AND (\ Z . GIVE SISTER (ONE DISH) Z) (\ Z . GIVE BROTHER (ONE WINE) Z)
     HESHE)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (ZHANGSAN WO QIDAI TA yao lai) onto S


Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (ZHANGSAN WO QUAN TA yao lai) onto 'S


Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (ZHANGSAN WO DAYING TA yao lai) onto S


Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
======================= l o a d i n g =======================================

Project g file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  CCG grammar source       : g.ccg
          token form       : g.lisptokens
  Compiled/loaded grammar  : g.ccg.lisp
       *CCG-GRAMMAR*       : 116 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

Summary of compiling type-raising for grammar   : g.ccg.lisp
There were NO errors/warnings in deriving second order functions
Number of lexical entries                       : 116
Number of lexical functions considered          : 4
Number of second-order case functions generated : 4
Number of paradigmatic functions out of them    : 4
Use (mergesave-tr <pn>) to merge and save the rules
 with current grammar to <pn>.ccg.lisp
Type-raising rules added at the end of *ccg-grammar*
compiled, subsumed and saved.
======================= l o a d i n g =======================================

Project g-jp file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  Compiled/loaded grammar  : g-jp.ccg.lisp
       *CCG-GRAMMAR*       : 120 entries
   *LEX-RULES-TABLE*       : 4 entries
=============================================================================

Derivations of (TAROO-WA HANAKO-NI KITEIRU HUKU-O YOGOS-ARE-TA) onto S



Derivation 1
--------------
LEX   (TAROO-WA) := NP
        : TAROO
LEX   (HANAKO-NI) := NP
        : HANAKO
LEX   (KITEIRU) := (CING\NP)\NP
        : (LAM X (LAM Y ((WEARING X) Y)))
LEX   (HUKU-O) := PREDP\((CING\NP)\NP)
        : (LAM P (P CLOTHES))
<     (KITEIRU)(HUKU-O) := PREDP
        : ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y))))
LEX   (YOGOS-ARE-TA) := ((S\NP)\NP)\PREDP
        : (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z))))
<     (KITEIRU HUKU-O)(YOGOS-ARE-TA) := (S\NP)\NP
        : ((LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z))))
           ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y)))))
<     (HANAKO-NI)(KITEIRU HUKU-O YOGOS-ARE-TA) := S\NP
        : (((LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z))))
            ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y)))))
           HANAKO)
<     (TAROO-WA)(HANAKO-NI KITEIRU HUKU-O YOGOS-ARE-TA) := S
        : ((((LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z))))
             ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y)))))
            HANAKO)
           TAROO)

Final LF, normal-order evaluated: 

    (((LET ((DIRTY ((WEARING CLOTHES) TAROO)) HANAKO)) HANAKO) TAROO) =
    (LET (DIRTY (WEARING CLOTHES TAROO) HANAKO) HANAKO TAROO)

Derivation 2
--------------
LEX   (KITEIRU) := (CING\NP)\NP
        : (LAM X (LAM Y ((WEARING X) Y)))
LEX   (HUKU-O) := PREDP\((CING\NP)\NP)
        : (LAM P (P CLOTHES))
<     (KITEIRU)(HUKU-O) := PREDP
        : ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y))))
LEX   (TAROO-WA) := NP
        : TAROO
LEX   (HANAKO-NI) := NP
        : HANAKO
_G2_944 (KITEIRU HUKU-O) := ((S\NP)\NP)/(((S\NP)\NP)\PREDP)
        : ((LAM LF (LAM P (P LF)))
           ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y)))))
LEX   (YOGOS-ARE-TA) := ((S\NP)\NP)\PREDP
        : (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z))))
>     (KITEIRU HUKU-O)(YOGOS-ARE-TA) := (S\NP)\NP
        : (((LAM LF (LAM P (P LF)))
            ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y)))))
           (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z)))))
<     (HANAKO-NI)(KITEIRU HUKU-O YOGOS-ARE-TA) := S\NP
        : ((((LAM LF (LAM P (P LF)))
             ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y)))))
            (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z)))))
           HANAKO)
<     (TAROO-WA)(HANAKO-NI KITEIRU HUKU-O YOGOS-ARE-TA) := S
        : (((((LAM LF (LAM P (P LF)))
              ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y)))))
             (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z)))))
            HANAKO)
           TAROO)

Final LF, normal-order evaluated: 

    (((LET ((DIRTY ((WEARING CLOTHES) TAROO)) HANAKO)) HANAKO) TAROO) =
    (LET (DIRTY (WEARING CLOTHES TAROO) HANAKO) HANAKO TAROO)

Derivation 3
--------------
LEX   (TAROO-WA) := NP
        : TAROO
_G2_945 (HANAKO-NI) := (S\NP)/((S\NP)\NP)
        : ((LAM LF (LAM P (P LF))) HANAKO)
LEX   (KITEIRU) := (CING\NP)\NP
        : (LAM X (LAM Y ((WEARING X) Y)))
LEX   (HUKU-O) := PREDP\((CING\NP)\NP)
        : (LAM P (P CLOTHES))
<     (KITEIRU)(HUKU-O) := PREDP
        : ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y))))
LEX   (YOGOS-ARE-TA) := ((S\NP)\NP)\PREDP
        : (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z))))
<     (KITEIRU HUKU-O)(YOGOS-ARE-TA) := (S\NP)\NP
        : ((LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z))))
           ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y)))))
>     (HANAKO-NI)(KITEIRU HUKU-O YOGOS-ARE-TA) := S\NP
        : (((LAM LF (LAM P (P LF))) HANAKO)
           ((LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z))))
            ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y))))))
<     (TAROO-WA)(HANAKO-NI KITEIRU HUKU-O YOGOS-ARE-TA) := S
        : ((((LAM LF (LAM P (P LF))) HANAKO)
            ((LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z))))
             ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y))))))
           TAROO)

Final LF, normal-order evaluated: 

    (((LET ((DIRTY ((WEARING CLOTHES) TAROO)) HANAKO)) HANAKO) TAROO) =
    (LET (DIRTY (WEARING CLOTHES TAROO) HANAKO) HANAKO TAROO)

Derivation 4
--------------
LEX   (KITEIRU) := (CING\NP)\NP
        : (LAM X (LAM Y ((WEARING X) Y)))
LEX   (HUKU-O) := PREDP\((CING\NP)\NP)
        : (LAM P (P CLOTHES))
<     (KITEIRU)(HUKU-O) := PREDP
        : ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y))))
LEX   (TAROO-WA) := NP
        : TAROO
_G2_945 (HANAKO-NI) := (S\NP)/((S\NP)\NP)
        : ((LAM LF (LAM P (P LF))) HANAKO)
_G2_944 (KITEIRU HUKU-O) := ((S\NP)\NP)/(((S\NP)\NP)\PREDP)
        : ((LAM LF (LAM P (P LF)))
           ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y)))))
LEX   (YOGOS-ARE-TA) := ((S\NP)\NP)\PREDP
        : (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z))))
>     (KITEIRU HUKU-O)(YOGOS-ARE-TA) := (S\NP)\NP
        : (((LAM LF (LAM P (P LF)))
            ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y)))))
           (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z)))))
>     (HANAKO-NI)(KITEIRU HUKU-O YOGOS-ARE-TA) := S\NP
        : (((LAM LF (LAM P (P LF))) HANAKO)
           (((LAM LF (LAM P (P LF)))
             ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y)))))
            (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z))))))
<     (TAROO-WA)(HANAKO-NI KITEIRU HUKU-O YOGOS-ARE-TA) := S
        : ((((LAM LF (LAM P (P LF))) HANAKO)
            (((LAM LF (LAM P (P LF)))
              ((LAM P (P CLOTHES)) (LAM X (LAM Y ((WEARING X) Y)))))
             (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Z)) Y)) Y) Z))))))
           TAROO)

Final LF, normal-order evaluated: 

    (((LET ((DIRTY ((WEARING CLOTHES) TAROO)) HANAKO)) HANAKO) TAROO) =
    (LET (DIRTY (WEARING CLOTHES TAROO) HANAKO) HANAKO TAROO)

Derivation 5
--------------
LEX   (TAROO-WA) := NP
        : TAROO
LEX   (HANAKO-NI) := PREDP/((CING\NP)\NP)
        : (LAM P (LAM X ((P X) HANAKO)))
LEX   (KITEIRU) := (CING\NP)\NP
        : (LAM X (LAM Y ((WEARING X) Y)))
>     (HANAKO-NI)(KITEIRU) := PREDP
        : ((LAM P (LAM X ((P X) HANAKO))) (LAM X (LAM Y ((WEARING X) Y))))
LEX   (HUKU-O) := NP
        : CLOTHES
LEX   (YOGOS-ARE-TA) := ((S\NP)\PREDP)\NP
        : (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Y)) Y)) Y) Z))))
<     (HUKU-O)(YOGOS-ARE-TA) := (S\NP)\PREDP
        : ((LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Y)) Y)) Y) Z)))) CLOTHES)
<     (HANAKO-NI KITEIRU)(HUKU-O YOGOS-ARE-TA) := S\NP
        : (((LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Y)) Y)) Y) Z)))) CLOTHES)
           ((LAM P (LAM X ((P X) HANAKO))) (LAM X (LAM Y ((WEARING X) Y)))))
<     (TAROO-WA)(HANAKO-NI KITEIRU HUKU-O YOGOS-ARE-TA) := S
        : ((((LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Y)) Y)) Y) Z)))) CLOTHES)
            ((LAM P (LAM X ((P X) HANAKO))) (LAM X (LAM Y ((WEARING X) Y)))))
           TAROO)

Final LF, normal-order evaluated: 

    (((LET
       ((DIRTY (CLOTHES (LAM X ((WEARING X) HANAKO))))
        (LAM X ((WEARING X) HANAKO))))
      (LAM X ((WEARING X) HANAKO)))
     TAROO) =
    (LET (DIRTY (CLOTHES (\ X . WEARING X HANAKO)) (\ X . WEARING X HANAKO))
     (\ X . WEARING X HANAKO) TAROO)

Derivation 6
--------------
LEX   (TAROO-WA) := NP
        : TAROO
LEX   (HANAKO-NI) := PREDP/((CING\NP)\NP)
        : (LAM P (LAM X ((P X) HANAKO)))
LEX   (KITEIRU) := (CING\NP)\NP
        : (LAM X (LAM Y ((WEARING X) Y)))
>     (HANAKO-NI)(KITEIRU) := PREDP
        : ((LAM P (LAM X ((P X) HANAKO))) (LAM X (LAM Y ((WEARING X) Y))))
_G2_943 (HUKU-O) := ((S\NP)\PREDP)/(((S\NP)\PREDP)\NP)
        : ((LAM LF (LAM P (P LF))) CLOTHES)
LEX   (YOGOS-ARE-TA) := ((S\NP)\PREDP)\NP
        : (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Y)) Y)) Y) Z))))
>     (HUKU-O)(YOGOS-ARE-TA) := (S\NP)\PREDP
        : (((LAM LF (LAM P (P LF))) CLOTHES)
           (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Y)) Y)) Y) Z)))))
<     (HANAKO-NI KITEIRU)(HUKU-O YOGOS-ARE-TA) := S\NP
        : ((((LAM LF (LAM P (P LF))) CLOTHES)
            (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Y)) Y)) Y) Z)))))
           ((LAM P (LAM X ((P X) HANAKO))) (LAM X (LAM Y ((WEARING X) Y)))))
<     (TAROO-WA)(HANAKO-NI KITEIRU HUKU-O YOGOS-ARE-TA) := S
        : (((((LAM LF (LAM P (P LF))) CLOTHES)
             (LAM X (LAM Y (LAM Z (((LET ((DIRTY (X Y)) Y)) Y) Z)))))
            ((LAM P (LAM X ((P X) HANAKO))) (LAM X (LAM Y ((WEARING X) Y)))))
           TAROO)

Final LF, normal-order evaluated: 

    (((LET
       ((DIRTY (CLOTHES (LAM X ((WEARING X) HANAKO))))
        (LAM X ((WEARING X) HANAKO))))
      (LAM X ((WEARING X) HANAKO)))
     TAROO) =
    (LET (DIRTY (CLOTHES (\ X . WEARING X HANAKO)) (\ X . WEARING X HANAKO))
     (\ X . WEARING X HANAKO) TAROO)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
======================= l o a d i n g =======================================

Project g file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  CCG grammar source       : g.ccg
          token form       : g.lisptokens
  Compiled/loaded grammar  : g.ccg.lisp
       *CCG-GRAMMAR*       : 116 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

Summary of compiling type-raising for grammar   : g.ccg.lisp
There were NO errors/warnings in deriving second order functions
Number of lexical entries                       : 116
Number of lexical functions considered          : 3
Number of second-order case functions generated : 3
Number of paradigmatic functions out of them    : 3
Use (mergesave-tr <pn>) to merge and save the rules
 with current grammar to <pn>.ccg.lisp
Type-raising rules added at the end of *ccg-grammar*
compiled, subsumed and saved.
======================= l o a d i n g =======================================

Project g-sh file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  Compiled/loaded grammar  : g-sh.ccg.lisp
       *CCG-GRAMMAR*       : 119 entries
   *LEX-RULES-TABLE*       : 3 entries
=============================================================================

Derivations of (OCHITI-BAON-RA BAKE NATEX-KAN-KE) onto S



Derivation 1
--------------
LEX   (OCHITI-BAON-RA) := NP
        : DOGS
LEX   (BAKE) := NP
        : CHILD
LEX   (NATEX-KAN-KE) := (S\NP)\NP
        : (LAM X (LAM Y ((BITE X) Y)))
<     (BAKE)(NATEX-KAN-KE) := S\NP
        : ((LAM X (LAM Y ((BITE X) Y))) CHILD)
<     (OCHITI-BAON-RA)(BAKE NATEX-KAN-KE) := S
        : (((LAM X (LAM Y ((BITE X) Y))) CHILD) DOGS)

Final LF, normal-order evaluated: 

    ((BITE CHILD) DOGS) =
    (BITE CHILD DOGS)

Derivation 2
--------------
LEX   (OCHITI-BAON-RA) := NP
        : DOGS
_G2_963 (BAKE) := (S\NP)/((S\NP)\NP)
        : ((LAM LF (LAM P (P LF))) CHILD)
LEX   (NATEX-KAN-KE) := (S\NP)\NP
        : (LAM X (LAM Y ((BITE X) Y)))
>     (BAKE)(NATEX-KAN-KE) := S\NP
        : (((LAM LF (LAM P (P LF))) CHILD) (LAM X (LAM Y ((BITE X) Y))))
<     (OCHITI-BAON-RA)(BAKE NATEX-KAN-KE) := S
        : ((((LAM LF (LAM P (P LF))) CHILD) (LAM X (LAM Y ((BITE X) Y)))) DOGS)

Final LF, normal-order evaluated: 

    ((BITE CHILD) DOGS) =
    (BITE CHILD DOGS)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (JONI-BO-RA MAWA-KAN-KE) onto S



Derivation 1
--------------
LEX   (JONI-BO-RA) := NP
        : PERSONS
LEX   (MAWA-KAN-KE) := S\NP
        : (LAM X (DIE X))
<     (JONI-BO-RA)(MAWA-KAN-KE) := S
        : ((LAM X (DIE X)) PERSONS)

Final LF, normal-order evaluated: 

    (DIE PERSONS) =
    (DIE PERSONS)

Derivation 2
--------------
_G2_961 (JONI-BO-RA) := S/(S\NP)
        : ((LAM LF (LAM P (P LF))) PERSONS)
LEX   (MAWA-KAN-KE) := S\NP
        : (LAM X (DIE X))
>     (JONI-BO-RA)(MAWA-KAN-KE) := S
        : (((LAM LF (LAM P (P LF))) PERSONS) (LAM X (DIE X)))

Final LF, normal-order evaluated: 

    (DIE PERSONS) =
    (DIE PERSONS)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (OCHITI-NIN-RA BAKE-BO NATEX-KAN-KE) onto S


Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
======================= l o a d i n g =======================================

Project g file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  CCG grammar source       : g.ccg
          token form       : g.lisptokens
  Compiled/loaded grammar  : g.ccg.lisp
       *CCG-GRAMMAR*       : 116 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

Summary of compiling type-raising for grammar   : g.ccg.lisp
There were NO errors/warnings in deriving second order functions
Number of lexical entries                       : 116
Number of lexical functions considered          : 2
Number of second-order case functions generated : 2
Number of paradigmatic functions out of them    : 2
Use (mergesave-tr <pn>) to merge and save the rules
 with current grammar to <pn>.ccg.lisp
Type-raising rules added at the end of *ccg-grammar*
compiled, subsumed and saved.
======================= l o a d i n g =======================================

Project g-nu file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  Compiled/loaded grammar  : g-nu.ccg.lisp
       *CCG-GRAMMAR*       : 118 entries
   *LEX-RULES-TABLE*       : 2 entries
=============================================================================

Derivations of (M33KA55 M33KO44 NDU21) onto S



Derivation 1
--------------
LEX   (M33KA55) := NP
        : MUGA
LEX   (M33KO44) := NP
        : MUGO
LEX   (NDU21) := (S\NP)\NP
        : (LAM X (LAM Y ((BEAT X) Y)))
<     (M33KO44)(NDU21) := S\NP
        : ((LAM X (LAM Y ((BEAT X) Y))) MUGO)
<     (M33KA55)(M33KO44 NDU21) := S
        : (((LAM X (LAM Y ((BEAT X) Y))) MUGO) MUGA)

Final LF, normal-order evaluated: 

    ((BEAT MUGO) MUGA) =
    (BEAT MUGO MUGA)

Derivation 2
--------------
LEX   (M33KA55) := NP
        : MUGA
LEX   (M33KO44) := NP
        : MUGO
LEX   (NDU21) := (S\NP)\NP
        : (LAM X (LAM Y ((BEAT Y) X)))
<     (M33KO44)(NDU21) := S\NP
        : ((LAM X (LAM Y ((BEAT Y) X))) MUGO)
<     (M33KA55)(M33KO44 NDU21) := S
        : (((LAM X (LAM Y ((BEAT Y) X))) MUGO) MUGA)

Final LF, normal-order evaluated: 

    ((BEAT MUGA) MUGO) =
    (BEAT MUGA MUGO)

Derivation 3
--------------
LEX   (M33KA55) := NP
        : MUGA
_G2_964 (M33KO44) := (S\NP)/((S\NP)\NP)
        : ((LAM LF (LAM P (P LF))) MUGO)
LEX   (NDU21) := (S\NP)\NP
        : (LAM X (LAM Y ((BEAT X) Y)))
>     (M33KO44)(NDU21) := S\NP
        : (((LAM LF (LAM P (P LF))) MUGO) (LAM X (LAM Y ((BEAT X) Y))))
<     (M33KA55)(M33KO44 NDU21) := S
        : ((((LAM LF (LAM P (P LF))) MUGO) (LAM X (LAM Y ((BEAT X) Y)))) MUGA)

Final LF, normal-order evaluated: 

    ((BEAT MUGO) MUGA) =
    (BEAT MUGO MUGA)

Derivation 4
--------------
LEX   (M33KA55) := NP
        : MUGA
_G2_965 (M33KO44) := (S\NP)/((S\NP)\NP)
        : ((LAM LF (LAM P (P LF))) MUGO)
LEX   (NDU21) := (S\NP)\NP
        : (LAM X (LAM Y ((BEAT Y) X)))
>     (M33KO44)(NDU21) := S\NP
        : (((LAM LF (LAM P (P LF))) MUGO) (LAM X (LAM Y ((BEAT Y) X))))
<     (M33KA55)(M33KO44 NDU21) := S
        : ((((LAM LF (LAM P (P LF))) MUGO) (LAM X (LAM Y ((BEAT Y) X)))) MUGA)

Final LF, normal-order evaluated: 

    ((BEAT MUGA) MUGO) =
    (BEAT MUGA MUGO)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
======================= l o a d i n g =======================================

Project g file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  CCG grammar source       : g.ccg
          token form       : g.lisptokens
  Compiled/loaded grammar  : g.ccg.lisp
       *CCG-GRAMMAR*       : 116 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

Summary of compiling type-raising for grammar   : g.ccg.lisp
There were NO errors/warnings in deriving second order functions
Number of lexical entries                       : 116
Number of lexical functions considered          : 3
Number of second-order case functions generated : 3
Number of paradigmatic functions out of them    : 3
Use (mergesave-tr <pn>) to merge and save the rules
 with current grammar to <pn>.ccg.lisp
Type-raising rules added at the end of *ccg-grammar*
compiled, subsumed and saved.
======================= l o a d i n g =======================================

Project g-tr file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  Compiled/loaded grammar  : g-tr.ccg.lisp
       *CCG-GRAMMAR*       : 119 entries
   *LEX-RULES-TABLE*       : 3 entries
=============================================================================

Derivations of (BEN-IM ADAM-IN OKU -DUGU -NU BIL -DIGIM KITAP) onto NP



Derivation 1
--------------
LEX   (BEN-IM) := S/IV
        : (LAM P (P I))
_G2_968 (ADAM-IN) := IV/(IV\NP)
        : ((LAM LF (LAM P (P LF))) MAN)
LEX   (OKU) := IV\NP
        : (LAM X (LAM Y ((READ X) Y)))
LEX   (-DUGU) := (S\NP)\^IV
        : (LAM P (LAM X (P X)))
<B    (OKU)(-DUGU) := (S\NP)\NP
        : (LAM X ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) X)))
LEX   (-NU) := S\^S
        : (LAM P P)
<B2   (OKU -DUGU)(-NU) := (S\NP)\NP
        : (LAM X
           (LAM Y
            ((LAM P P)
             (((LAM X ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) X)))
               X)
              Y))))
LEX   (BIL) := IV\S
        : (LAM P (LAM X ((KNOW P) X)))
<B2   (OKU -DUGU -NU)(BIL) := (IV\NP)\NP
        : (LAM X
           (LAM Y
            ((LAM P (LAM X ((KNOW P) X)))
             (((LAM X
                (LAM Y
                 ((LAM P P)
                  (((LAM X
                     ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) X)))
                    X)
                   Y))))
               X)
              Y))))
>Bx   (ADAM-IN)(OKU -DUGU -NU BIL) := IV\NP
        : (LAM X
           (((LAM LF (LAM P (P LF))) MAN)
            ((LAM X
              (LAM Y
               ((LAM P (LAM X ((KNOW P) X)))
                (((LAM X
                   (LAM Y
                    ((LAM P P)
                     (((LAM X
                        ((LAM P (LAM X (P X)))
                         ((LAM X (LAM Y ((READ X) Y))) X)))
                       X)
                      Y))))
                  X)
                 Y))))
             X)))
>Bx   (BEN-IM)(ADAM-IN OKU -DUGU -NU BIL) := S\NP
        : (LAM X
           ((LAM P (P I))
            ((LAM X
              (((LAM LF (LAM P (P LF))) MAN)
               ((LAM X
                 (LAM Y
                  ((LAM P (LAM X ((KNOW P) X)))
                   (((LAM X
                      (LAM Y
                       ((LAM P P)
                        (((LAM X
                           ((LAM P (LAM X (P X)))
                            ((LAM X (LAM Y ((READ X) Y))) X)))
                          X)
                         Y))))
                     X)
                    Y))))
                X)))
             X)))
LEX   (-DIGIM) := (NP/NP)\^(S\NP)
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
<     (BEN-IM ADAM-IN OKU -DUGU -NU BIL)(-DIGIM) := NP/NP
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            ((LAM P (P I))
             ((LAM X
               (((LAM LF (LAM P (P LF))) MAN)
                ((LAM X
                  (LAM Y
                   ((LAM P (LAM X ((KNOW P) X)))
                    (((LAM X
                       (LAM Y
                        ((LAM P P)
                         (((LAM X
                            ((LAM P (LAM X (P X)))
                             ((LAM X (LAM Y ((READ X) Y))) X)))
                           X)
                          Y))))
                      X)
                     Y))))
                 X)))
              X))))
LEX   (KITAP) := NP\(NP/NP)
        : (LAM P (P BOOK))
<     (BEN-IM ADAM-IN OKU -DUGU -NU BIL -DIGIM)(KITAP) := NP
        : ((LAM P (P BOOK))
           ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             ((LAM P (P I))
              ((LAM X
                (((LAM LF (LAM P (P LF))) MAN)
                 ((LAM X
                   (LAM Y
                    ((LAM P (LAM X ((KNOW P) X)))
                     (((LAM X
                        (LAM Y
                         ((LAM P P)
                          (((LAM X
                             ((LAM P (LAM X (P X)))
                              ((LAM X (LAM Y ((READ X) Y))) X)))
                            X)
                           Y))))
                       X)
                      Y))))
                  X)))
               X)))))

Final LF, normal-order evaluated: 

    (LAM X ((AND ((KNOW ((READ X) MAN)) I)) (BOOK X))) =
    (\ X . AND (KNOW (READ X MAN) I) (BOOK X))

Derivation 2
--------------
LEX   (BEN-IM) := S/IV
        : (LAM P (P I))
_G2_967 (ADAM-IN) := (S\NP)/((S\NP)\NP)
        : ((LAM LF (LAM P (P LF))) MAN)
LEX   (OKU) := IV\NP
        : (LAM X (LAM Y ((READ X) Y)))
LEX   (-DUGU) := (S\NP)\^IV
        : (LAM P (LAM X (P X)))
<B    (OKU)(-DUGU) := (S\NP)\NP
        : (LAM X ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) X)))
LEX   (-NU) := S\^S
        : (LAM P P)
<B2   (OKU -DUGU)(-NU) := (S\NP)\NP
        : (LAM X
           (LAM Y
            ((LAM P P)
             (((LAM X ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) X)))
               X)
              Y))))
>     (ADAM-IN)(OKU -DUGU -NU) := S\NP
        : (((LAM LF (LAM P (P LF))) MAN)
           (LAM X
            (LAM Y
             ((LAM P P)
              (((LAM X
                 ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) X)))
                X)
               Y)))))
LEX   (BIL) := IV\S
        : (LAM P (LAM X ((KNOW P) X)))
<B    (ADAM-IN OKU -DUGU -NU)(BIL) := IV\NP
        : (LAM X
           ((LAM P (LAM X ((KNOW P) X)))
            ((((LAM LF (LAM P (P LF))) MAN)
              (LAM X
               (LAM Y
                ((LAM P P)
                 (((LAM X
                    ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) X)))
                   X)
                  Y)))))
             X)))
>Bx   (BEN-IM)(ADAM-IN OKU -DUGU -NU BIL) := S\NP
        : (LAM X
           ((LAM P (P I))
            ((LAM X
              ((LAM P (LAM X ((KNOW P) X)))
               ((((LAM LF (LAM P (P LF))) MAN)
                 (LAM X
                  (LAM Y
                   ((LAM P P)
                    (((LAM X
                       ((LAM P (LAM X (P X)))
                        ((LAM X (LAM Y ((READ X) Y))) X)))
                      X)
                     Y)))))
                X)))
             X)))
LEX   (-DIGIM) := (NP/NP)\^(S\NP)
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
<     (BEN-IM ADAM-IN OKU -DUGU -NU BIL)(-DIGIM) := NP/NP
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            ((LAM P (P I))
             ((LAM X
               ((LAM P (LAM X ((KNOW P) X)))
                ((((LAM LF (LAM P (P LF))) MAN)
                  (LAM X
                   (LAM Y
                    ((LAM P P)
                     (((LAM X
                        ((LAM P (LAM X (P X)))
                         ((LAM X (LAM Y ((READ X) Y))) X)))
                       X)
                      Y)))))
                 X)))
              X))))
LEX   (KITAP) := NP\(NP/NP)
        : (LAM P (P BOOK))
<     (BEN-IM ADAM-IN OKU -DUGU -NU BIL -DIGIM)(KITAP) := NP
        : ((LAM P (P BOOK))
           ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             ((LAM P (P I))
              ((LAM X
                ((LAM P (LAM X ((KNOW P) X)))
                 ((((LAM LF (LAM P (P LF))) MAN)
                   (LAM X
                    (LAM Y
                     ((LAM P P)
                      (((LAM X
                         ((LAM P (LAM X (P X)))
                          ((LAM X (LAM Y ((READ X) Y))) X)))
                        X)
                       Y)))))
                  X)))
               X)))))

Final LF, normal-order evaluated: 

    (LAM X ((AND ((KNOW ((READ MAN) X)) I)) (BOOK X))) =
    (\ X . AND (KNOW (READ MAN X) I) (BOOK X))

Derivation 3
--------------
LEX   (BEN-IM) := S/IV
        : (LAM P (P I))
_G2_967 (ADAM-IN) := (S\NP)/((S\NP)\NP)
        : ((LAM LF (LAM P (P LF))) MAN)
LEX   (OKU) := IV\NP
        : (LAM X (LAM Y ((READ X) Y)))
LEX   (-DUGU) := (S\NP)\^IV
        : (LAM P (LAM X (P X)))
<B    (OKU)(-DUGU) := (S\NP)\NP
        : (LAM X ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) X)))
>     (ADAM-IN)(OKU -DUGU) := S\NP
        : (((LAM LF (LAM P (P LF))) MAN)
           (LAM X ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) X))))
LEX   (-NU) := S\^S
        : (LAM P P)
<B    (ADAM-IN OKU -DUGU)(-NU) := S\NP
        : (LAM X
           ((LAM P P)
            ((((LAM LF (LAM P (P LF))) MAN)
              (LAM X ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) X))))
             X)))
LEX   (BIL) := IV\S
        : (LAM P (LAM X ((KNOW P) X)))
<B    (ADAM-IN OKU -DUGU -NU)(BIL) := IV\NP
        : (LAM X
           ((LAM P (LAM X ((KNOW P) X)))
            ((LAM X
              ((LAM P P)
               ((((LAM LF (LAM P (P LF))) MAN)
                 (LAM X
                  ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) X))))
                X)))
             X)))
>Bx   (BEN-IM)(ADAM-IN OKU -DUGU -NU BIL) := S\NP
        : (LAM X
           ((LAM P (P I))
            ((LAM X
              ((LAM P (LAM X ((KNOW P) X)))
               ((LAM X
                 ((LAM P P)
                  ((((LAM LF (LAM P (P LF))) MAN)
                    (LAM X
                     ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) X))))
                   X)))
                X)))
             X)))
LEX   (-DIGIM) := (NP/NP)\^(S\NP)
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
<     (BEN-IM ADAM-IN OKU -DUGU -NU BIL)(-DIGIM) := NP/NP
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            ((LAM P (P I))
             ((LAM X
               ((LAM P (LAM X ((KNOW P) X)))
                ((LAM X
                  ((LAM P P)
                   ((((LAM LF (LAM P (P LF))) MAN)
                     (LAM X
                      ((LAM P (LAM X (P X)))
                       ((LAM X (LAM Y ((READ X) Y))) X))))
                    X)))
                 X)))
              X))))
LEX   (KITAP) := NP\(NP/NP)
        : (LAM P (P BOOK))
<     (BEN-IM ADAM-IN OKU -DUGU -NU BIL -DIGIM)(KITAP) := NP
        : ((LAM P (P BOOK))
           ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             ((LAM P (P I))
              ((LAM X
                ((LAM P (LAM X ((KNOW P) X)))
                 ((LAM X
                   ((LAM P P)
                    ((((LAM LF (LAM P (P LF))) MAN)
                      (LAM X
                       ((LAM P (LAM X (P X)))
                        ((LAM X (LAM Y ((READ X) Y))) X))))
                     X)))
                  X)))
               X)))))

Final LF, normal-order evaluated: 

    (LAM X ((AND ((KNOW ((READ MAN) X)) I)) (BOOK X))) =
    (\ X . AND (KNOW (READ MAN X) I) (BOOK X))

Derivation 4
--------------
LEX   (BEN-IM) := S/IV
        : (LAM P (P I))
LEX   (ADAM-IN) := NP
        : MAN
LEX   (OKU) := IV\NP
        : (LAM X (LAM Y ((READ X) Y)))
<     (ADAM-IN)(OKU) := IV
        : ((LAM X (LAM Y ((READ X) Y))) MAN)
LEX   (-DUGU) := (S\NP)\^IV
        : (LAM P (LAM X (P X)))
<     (ADAM-IN OKU)(-DUGU) := S\NP
        : ((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) MAN))
LEX   (-NU) := S\^S
        : (LAM P P)
<B    (ADAM-IN OKU -DUGU)(-NU) := S\NP
        : (LAM X
           ((LAM P P)
            (((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) MAN)) X)))
LEX   (BIL) := IV\S
        : (LAM P (LAM X ((KNOW P) X)))
<B    (ADAM-IN OKU -DUGU -NU)(BIL) := IV\NP
        : (LAM X
           ((LAM P (LAM X ((KNOW P) X)))
            ((LAM X
              ((LAM P P)
               (((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) MAN)) X)))
             X)))
>Bx   (BEN-IM)(ADAM-IN OKU -DUGU -NU BIL) := S\NP
        : (LAM X
           ((LAM P (P I))
            ((LAM X
              ((LAM P (LAM X ((KNOW P) X)))
               ((LAM X
                 ((LAM P P)
                  (((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) MAN))
                   X)))
                X)))
             X)))
LEX   (-DIGIM) := (NP/NP)\^(S\NP)
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
<     (BEN-IM ADAM-IN OKU -DUGU -NU BIL)(-DIGIM) := NP/NP
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            ((LAM P (P I))
             ((LAM X
               ((LAM P (LAM X ((KNOW P) X)))
                ((LAM X
                  ((LAM P P)
                   (((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) MAN))
                    X)))
                 X)))
              X))))
LEX   (KITAP) := NP\(NP/NP)
        : (LAM P (P BOOK))
<     (BEN-IM ADAM-IN OKU -DUGU -NU BIL -DIGIM)(KITAP) := NP
        : ((LAM P (P BOOK))
           ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             ((LAM P (P I))
              ((LAM X
                ((LAM P (LAM X ((KNOW P) X)))
                 ((LAM X
                   ((LAM P P)
                    (((LAM P (LAM X (P X))) ((LAM X (LAM Y ((READ X) Y))) MAN))
                     X)))
                  X)))
               X)))))

Final LF, normal-order evaluated: 

    (LAM X ((AND ((KNOW ((READ MAN) X)) I)) (BOOK X))) =
    (\ X . AND (KNOW (READ MAN X) I) (BOOK X))

Derivation 5
--------------
LEX   (BEN-IM) := S/IV
        : (LAM P (P I))
_G2_968 (ADAM-IN) := IV/(IV\NP)
        : ((LAM LF (LAM P (P LF))) MAN)
LEX   (OKU) := IV\NP
        : (LAM X (LAM Y ((READ X) Y)))
>     (ADAM-IN)(OKU) := IV
        : (((LAM LF (LAM P (P LF))) MAN) (LAM X (LAM Y ((READ X) Y))))
LEX   (-DUGU) := (S\NP)\^IV
        : (LAM P (LAM X (P X)))
<     (ADAM-IN OKU)(-DUGU) := S\NP
        : ((LAM P (LAM X (P X)))
           (((LAM LF (LAM P (P LF))) MAN) (LAM X (LAM Y ((READ X) Y)))))
LEX   (-NU) := S\^S
        : (LAM P P)
<B    (ADAM-IN OKU -DUGU)(-NU) := S\NP
        : (LAM X
           ((LAM P P)
            (((LAM P (LAM X (P X)))
              (((LAM LF (LAM P (P LF))) MAN) (LAM X (LAM Y ((READ X) Y)))))
             X)))
LEX   (BIL) := IV\S
        : (LAM P (LAM X ((KNOW P) X)))
<B    (ADAM-IN OKU -DUGU -NU)(BIL) := IV\NP
        : (LAM X
           ((LAM P (LAM X ((KNOW P) X)))
            ((LAM X
              ((LAM P P)
               (((LAM P (LAM X (P X)))
                 (((LAM LF (LAM P (P LF))) MAN) (LAM X (LAM Y ((READ X) Y)))))
                X)))
             X)))
>Bx   (BEN-IM)(ADAM-IN OKU -DUGU -NU BIL) := S\NP
        : (LAM X
           ((LAM P (P I))
            ((LAM X
              ((LAM P (LAM X ((KNOW P) X)))
               ((LAM X
                 ((LAM P P)
                  (((LAM P (LAM X (P X)))
                    (((LAM LF (LAM P (P LF))) MAN)
                     (LAM X (LAM Y ((READ X) Y)))))
                   X)))
                X)))
             X)))
LEX   (-DIGIM) := (NP/NP)\^(S\NP)
        : (LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
<     (BEN-IM ADAM-IN OKU -DUGU -NU BIL)(-DIGIM) := NP/NP
        : ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
           (LAM X
            ((LAM P (P I))
             ((LAM X
               ((LAM P (LAM X ((KNOW P) X)))
                ((LAM X
                  ((LAM P P)
                   (((LAM P (LAM X (P X)))
                     (((LAM LF (LAM P (P LF))) MAN)
                      (LAM X (LAM Y ((READ X) Y)))))
                    X)))
                 X)))
              X))))
LEX   (KITAP) := NP\(NP/NP)
        : (LAM P (P BOOK))
<     (BEN-IM ADAM-IN OKU -DUGU -NU BIL -DIGIM)(KITAP) := NP
        : ((LAM P (P BOOK))
           ((LAM P (LAM Q (LAM X ((AND (P X)) (Q X)))))
            (LAM X
             ((LAM P (P I))
              ((LAM X
                ((LAM P (LAM X ((KNOW P) X)))
                 ((LAM X
                   ((LAM P P)
                    (((LAM P (LAM X (P X)))
                      (((LAM LF (LAM P (P LF))) MAN)
                       (LAM X (LAM Y ((READ X) Y)))))
                     X)))
                  X)))
               X)))))

Final LF, normal-order evaluated: 

    (LAM X ((AND ((KNOW ((READ MAN) X)) I)) (BOOK X))) =
    (\ X . AND (KNOW (READ MAN X) I) (BOOK X))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
======================= l o a d i n g =======================================

Project g file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  CCG grammar source       : g.ccg
          token form       : g.lisptokens
  Compiled/loaded grammar  : g.ccg.lisp
       *CCG-GRAMMAR*       : 116 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

Summary of compiling type-raising for grammar   : g.ccg.lisp
There were NO errors/warnings in deriving second order functions
Number of lexical entries                       : 116
Number of lexical functions considered          : 1
Number of second-order case functions generated : 1
Number of paradigmatic functions out of them    : 1
Use (mergesave-tr <pn>) to merge and save the rules
 with current grammar to <pn>.ccg.lisp
Type-raising rules added at the end of *ccg-grammar*
compiled, subsumed and saved.
======================= l o a d i n g =======================================

Project g-pt file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  Compiled/loaded grammar  : g-pt.ccg.lisp
       *CCG-GRAMMAR*       : 117 entries
   *LEX-RULES-TABLE*       : 1 entries
=============================================================================

Derivations of (O Paulo NAO OS VIU) onto S



Derivation 1
--------------
LEX   (O Paulo) := NP
        : PAUL
LEX   (NAO) := (S\NP)/(S\NP)
        : (LAM P (LAM X (NEG (P X))))
LEX   (OS) := (S\NP)/((S\NP)/NP)
        : (LAM P (P THEM))
LEX   (VIU) := (S\NP)/NP
        : (LAM X (LAM Y ((SEE X) Y)))
>     (OS)(VIU) := S\NP
        : ((LAM P (P THEM)) (LAM X (LAM Y ((SEE X) Y))))
>     (NAO)(OS VIU) := S\NP
        : ((LAM P (LAM X (NEG (P X))))
           ((LAM P (P THEM)) (LAM X (LAM Y ((SEE X) Y)))))
<     ("O Paulo")(NAO OS VIU) := S
        : (((LAM P (LAM X (NEG (P X))))
            ((LAM P (P THEM)) (LAM X (LAM Y ((SEE X) Y)))))
           PAUL)

Final LF, normal-order evaluated: 

    (NEG ((SEE THEM) PAUL)) =
    (NEG (SEE THEM PAUL))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
======================= l o a d i n g =======================================

Project g file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  CCG grammar source       : g.ccg
          token form       : g.lisptokens
  Compiled/loaded grammar  : g.ccg.lisp
       *CCG-GRAMMAR*       : 116 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

Summary of compiling type-raising for grammar   : g.ccg.lisp
There were NO errors/warnings in deriving second order functions
Number of lexical entries                       : 116
Number of lexical functions considered          : 1
Number of second-order case functions generated : 1
Number of paradigmatic functions out of them    : 1
Use (mergesave-tr <pn>) to merge and save the rules
 with current grammar to <pn>.ccg.lisp
Type-raising rules added at the end of *ccg-grammar*
compiled, subsumed and saved.
======================= l o a d i n g =======================================

Project g-ko file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  Compiled/loaded grammar  : g-ko.ccg.lisp
       *CCG-GRAMMAR*       : 117 entries
   *LEX-RULES-TABLE*       : 1 entries
=============================================================================

Derivations of (HANKWUK-EY SEWUL-I NAMTAYMUN-SICANG-I PUL-I NA-ASS-TA) onto S


Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
======================= l o a d i n g =======================================

Project g file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  CCG grammar source       : g.ccg
          token form       : g.lisptokens
  Compiled/loaded grammar  : g.ccg.lisp
       *CCG-GRAMMAR*       : 116 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

Summary of compiling type-raising for grammar   : g.ccg.lisp
Log of warnings and errors                      : dy-err.log (1 entries) 
Number of lexical entries                       : 116
Number of lexical functions considered          : 4
Number of second-order case functions generated : 3
Number of paradigmatic functions out of them    : 3
Use (mergesave-tr <pn>) to merge and save the rules
 with current grammar to <pn>.ccg.lisp
Type-raising rules added at the end of *ccg-grammar*
compiled, subsumed and saved.
======================= l o a d i n g =======================================

Project g-dy file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  Compiled/loaded grammar  : g-dy.ccg.lisp
       *CCG-GRAMMAR*       : 119 entries
   *LEX-RULES-TABLE*       : 3 entries
=============================================================================

Derivations of (bayi yara NUMA-NGU GIGA-N GUBI-NGU MAWA-LI) onto S



Derivation 1
--------------
LEX   (bayi yara) := NP
        : MAN
LEX   (NUMA-NGU) := NP
        : FATHER
LEX   (GIGA-N) := ((S\NP)\NP)/VP
        : (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y))))
LEX   (GUBI-NGU) := NP
        : GUBI
LEX   (MAWA-LI) := VP\NP
        : (LAM X (LAM Y ((EXAMINE Y) X)))
<     (GUBI-NGU)(MAWA-LI) := VP
        : ((LAM X (LAM Y ((EXAMINE Y) X))) GUBI)
>     (GIGA-N)(GUBI-NGU MAWA-LI) := (S\NP)\NP
        : ((LAM P (LAM Y (LAM X (((TELL (P X)) X) Y))))
           ((LAM X (LAM Y ((EXAMINE Y) X))) GUBI))
<     (NUMA-NGU)(GIGA-N GUBI-NGU MAWA-LI) := S\NP
        : (((LAM P (LAM Y (LAM X (((TELL (P X)) X) Y))))
            ((LAM X (LAM Y ((EXAMINE Y) X))) GUBI))
           FATHER)
<     ("bayi yara")(NUMA-NGU GIGA-N GUBI-NGU MAWA-LI) := S
        : ((((LAM P (LAM Y (LAM X (((TELL (P X)) X) Y))))
             ((LAM X (LAM Y ((EXAMINE Y) X))) GUBI))
            FATHER)
           MAN)

Final LF, normal-order evaluated: 

    (((TELL ((EXAMINE MAN) GUBI)) MAN) FATHER) =
    (TELL (EXAMINE MAN GUBI) MAN FATHER)

Derivation 2
--------------
LEX   (bayi yara) := NP
        : MAN
LEX   (NUMA-NGU) := NP
        : FATHER
LEX   (GIGA-N) := ((S\NP)\NP)/VP
        : (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y))))
_G2_1016 (GUBI-NGU) := VP/(VP\NP)
        : ((LAM LF (LAM P (P LF))) GUBI)
LEX   (MAWA-LI) := VP\NP
        : (LAM X (LAM Y ((EXAMINE Y) X)))
>     (GUBI-NGU)(MAWA-LI) := VP
        : (((LAM LF (LAM P (P LF))) GUBI) (LAM X (LAM Y ((EXAMINE Y) X))))
>     (GIGA-N)(GUBI-NGU MAWA-LI) := (S\NP)\NP
        : ((LAM P (LAM Y (LAM X (((TELL (P X)) X) Y))))
           (((LAM LF (LAM P (P LF))) GUBI) (LAM X (LAM Y ((EXAMINE Y) X)))))
<     (NUMA-NGU)(GIGA-N GUBI-NGU MAWA-LI) := S\NP
        : (((LAM P (LAM Y (LAM X (((TELL (P X)) X) Y))))
            (((LAM LF (LAM P (P LF))) GUBI) (LAM X (LAM Y ((EXAMINE Y) X)))))
           FATHER)
<     ("bayi yara")(NUMA-NGU GIGA-N GUBI-NGU MAWA-LI) := S
        : ((((LAM P (LAM Y (LAM X (((TELL (P X)) X) Y))))
             (((LAM LF (LAM P (P LF))) GUBI) (LAM X (LAM Y ((EXAMINE Y) X)))))
            FATHER)
           MAN)

Final LF, normal-order evaluated: 

    (((TELL ((EXAMINE MAN) GUBI)) MAN) FATHER) =
    (TELL (EXAMINE MAN GUBI) MAN FATHER)

Derivation 3
--------------
LEX   (GUBI-NGU) := NP
        : GUBI
LEX   (MAWA-LI) := VP\NP
        : (LAM X (LAM Y ((EXAMINE Y) X)))
<     (GUBI-NGU)(MAWA-LI) := VP
        : ((LAM X (LAM Y ((EXAMINE Y) X))) GUBI)
LEX   (bayi yara) := NP
        : MAN
LEX   (NUMA-NGU) := NP
        : FATHER
LEX   (GIGA-N) := ((S\NP)\NP)/VP
        : (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y))))
_G2_1017 (GUBI-NGU MAWA-LI) := ((S\NP)\NP)\(((S\NP)\NP)/VP)
        : ((LAM LF (LAM P (P LF))) ((LAM X (LAM Y ((EXAMINE Y) X))) GUBI))
<     (GIGA-N)(GUBI-NGU MAWA-LI) := (S\NP)\NP
        : (((LAM LF (LAM P (P LF))) ((LAM X (LAM Y ((EXAMINE Y) X))) GUBI))
           (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y)))))
<     (NUMA-NGU)(GIGA-N GUBI-NGU MAWA-LI) := S\NP
        : ((((LAM LF (LAM P (P LF))) ((LAM X (LAM Y ((EXAMINE Y) X))) GUBI))
            (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y)))))
           FATHER)
<     ("bayi yara")(NUMA-NGU GIGA-N GUBI-NGU MAWA-LI) := S
        : (((((LAM LF (LAM P (P LF))) ((LAM X (LAM Y ((EXAMINE Y) X))) GUBI))
             (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y)))))
            FATHER)
           MAN)

Final LF, normal-order evaluated: 

    (((TELL ((EXAMINE MAN) GUBI)) MAN) FATHER) =
    (TELL (EXAMINE MAN GUBI) MAN FATHER)

Derivation 4
--------------
_G2_1016 (GUBI-NGU) := VP/(VP\NP)
        : ((LAM LF (LAM P (P LF))) GUBI)
LEX   (MAWA-LI) := VP\NP
        : (LAM X (LAM Y ((EXAMINE Y) X)))
>     (GUBI-NGU)(MAWA-LI) := VP
        : (((LAM LF (LAM P (P LF))) GUBI) (LAM X (LAM Y ((EXAMINE Y) X))))
LEX   (bayi yara) := NP
        : MAN
LEX   (NUMA-NGU) := NP
        : FATHER
LEX   (GIGA-N) := ((S\NP)\NP)/VP
        : (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y))))
_G2_1017 (GUBI-NGU MAWA-LI) := ((S\NP)\NP)\(((S\NP)\NP)/VP)
        : ((LAM LF (LAM P (P LF)))
           (((LAM LF (LAM P (P LF))) GUBI) (LAM X (LAM Y ((EXAMINE Y) X)))))
<     (GIGA-N)(GUBI-NGU MAWA-LI) := (S\NP)\NP
        : (((LAM LF (LAM P (P LF)))
            (((LAM LF (LAM P (P LF))) GUBI) (LAM X (LAM Y ((EXAMINE Y) X)))))
           (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y)))))
<     (NUMA-NGU)(GIGA-N GUBI-NGU MAWA-LI) := S\NP
        : ((((LAM LF (LAM P (P LF)))
             (((LAM LF (LAM P (P LF))) GUBI) (LAM X (LAM Y ((EXAMINE Y) X)))))
            (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y)))))
           FATHER)
<     ("bayi yara")(NUMA-NGU GIGA-N GUBI-NGU MAWA-LI) := S
        : (((((LAM LF (LAM P (P LF)))
              (((LAM LF (LAM P (P LF))) GUBI) (LAM X (LAM Y ((EXAMINE Y) X)))))
             (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y)))))
            FATHER)
           MAN)

Final LF, normal-order evaluated: 

    (((TELL ((EXAMINE MAN) GUBI)) MAN) FATHER) =
    (TELL (EXAMINE MAN GUBI) MAN FATHER)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (bayi yara NUMA-NGU GIGA-N BANAGA-NYU) onto S



Derivation 1
--------------
LEX   (bayi yara) := NP
        : MAN
LEX   (NUMA-NGU) := NP
        : FATHER
LEX   (GIGA-N) := ((S\NP)\NP)/VP
        : (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y))))
LEX   (BANAGA-NYU) := VP
        : (LAM X (RETURN X))
>     (GIGA-N)(BANAGA-NYU) := (S\NP)\NP
        : ((LAM P (LAM Y (LAM X (((TELL (P X)) X) Y)))) (LAM X (RETURN X)))
<     (NUMA-NGU)(GIGA-N BANAGA-NYU) := S\NP
        : (((LAM P (LAM Y (LAM X (((TELL (P X)) X) Y)))) (LAM X (RETURN X)))
           FATHER)
<     ("bayi yara")(NUMA-NGU GIGA-N BANAGA-NYU) := S
        : ((((LAM P (LAM Y (LAM X (((TELL (P X)) X) Y)))) (LAM X (RETURN X)))
            FATHER)
           MAN)

Final LF, normal-order evaluated: 

    (((TELL (RETURN MAN)) MAN) FATHER) =
    (TELL (RETURN MAN) MAN FATHER)

Derivation 2
--------------
LEX   (bayi yara) := NP
        : MAN
LEX   (NUMA-NGU) := NP
        : FATHER
LEX   (GIGA-N) := ((S\NP)\NP)/VP
        : (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y))))
_G2_1017 (BANAGA-NYU) := ((S\NP)\NP)\(((S\NP)\NP)/VP)
        : ((LAM LF (LAM P (P LF))) (LAM X (RETURN X)))
<     (GIGA-N)(BANAGA-NYU) := (S\NP)\NP
        : (((LAM LF (LAM P (P LF))) (LAM X (RETURN X)))
           (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y)))))
<     (NUMA-NGU)(GIGA-N BANAGA-NYU) := S\NP
        : ((((LAM LF (LAM P (P LF))) (LAM X (RETURN X)))
            (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y)))))
           FATHER)
<     ("bayi yara")(NUMA-NGU GIGA-N BANAGA-NYU) := S
        : (((((LAM LF (LAM P (P LF))) (LAM X (RETURN X)))
             (LAM P (LAM Y (LAM X (((TELL (P X)) X) Y)))))
            FATHER)
           MAN)

Final LF, normal-order evaluated: 

    (((TELL (RETURN MAN)) MAN) FATHER) =
    (TELL (RETURN MAN) MAN FATHER)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.

Derivation 1
--------------
LEX   (BAGUL) := NP/N
        : (LAM X (CLASS1 X))
LEX   (WANAL-GU) := N
        : BOOMERANG
>     (BAGUL)(WANAL-GU) := NP
        : ((LAM X (CLASS1 X)) BOOMERANG)
LEX   (BANUL-DIN-GU) := (NP\NP)/N
        : (LAM X (LAM Y ((OF X) Y)))
LEX   (YARA-NU-N-DIN-GU) := N
        : MAN
>     (BANUL-DIN-GU)(YARA-NU-N-DIN-GU) := NP\NP
        : ((LAM X (LAM Y ((OF X) Y))) MAN)
<     (BAGUL WANAL-GU)(BANUL-DIN-GU YARA-NU-N-DIN-GU) := NP
        : (((LAM X (LAM Y ((OF X) Y))) MAN) ((LAM X (CLASS1 X)) BOOMERANG))

Final LF, normal-order evaluated: 

    ((OF MAN) (CLASS1 BOOMERANG)) =
    (OF MAN (CLASS1 BOOMERANG))

Derivation 2
--------------
LEX   (BAGUL) := NP/N
        : (LAM X (CLASS1 X))
LEX   (WANAL-GU) := N
        : BOOMERANG
>     (BAGUL)(WANAL-GU) := NP
        : ((LAM X (CLASS1 X)) BOOMERANG)
_G2_1015 (BAGUL WANAL-GU) := NP/(NP\NP)
        : ((LAM LF (LAM P (P LF))) ((LAM X (CLASS1 X)) BOOMERANG))
LEX   (BANUL-DIN-GU) := (NP\NP)/N
        : (LAM X (LAM Y ((OF X) Y)))
LEX   (YARA-NU-N-DIN-GU) := N
        : MAN
>     (BANUL-DIN-GU)(YARA-NU-N-DIN-GU) := NP\NP
        : ((LAM X (LAM Y ((OF X) Y))) MAN)
>     (BAGUL WANAL-GU)(BANUL-DIN-GU YARA-NU-N-DIN-GU) := NP
        : (((LAM LF (LAM P (P LF))) ((LAM X (CLASS1 X)) BOOMERANG))
           ((LAM X (LAM Y ((OF X) Y))) MAN))

Final LF, normal-order evaluated: 

    ((OF MAN) (CLASS1 BOOMERANG)) =
    (OF MAN (CLASS1 BOOMERANG))

Derivation 3
--------------
LEX   (BAGUL) := NP/N
        : (LAM X (CLASS1 X))
LEX   (WANAL-GU) := N
        : BOOMERANG
>     (BAGUL)(WANAL-GU) := NP
        : ((LAM X (CLASS1 X)) BOOMERANG)
LEX   (BANUL-DIN-GU) := (NP\NP)/N
        : (LAM X (LAM Y ((OF X) Y)))
LEX   (YARA-NU-N-DIN-GU) := N
        : MAN
>     (BANUL-DIN-GU)(YARA-NU-N-DIN-GU) := NP\NP
        : ((LAM X (LAM Y ((OF X) Y))) MAN)
<     (BAGUL WANAL-GU)(BANUL-DIN-GU YARA-NU-N-DIN-GU) := NP
        : (((LAM X (LAM Y ((OF X) Y))) MAN) ((LAM X (CLASS1 X)) BOOMERANG))
_G2_1015 (BAGUL WANAL-GU BANUL-DIN-GU YARA-NU-N-DIN-GU) := NP/(NP\NP)
        : ((LAM LF (LAM P (P LF)))
           (((LAM X (LAM Y ((OF X) Y))) MAN) ((LAM X (CLASS1 X)) BOOMERANG)))

Final LF, normal-order evaluated: 

    (LAM P (P ((OF MAN) (CLASS1 BOOMERANG)))) =
    (\ P . P (OF MAN (CLASS1 BOOMERANG)))

Derivation 4
--------------
LEX   (BAGUL) := NP/N
        : (LAM X (CLASS1 X))
LEX   (WANAL-GU) := N
        : BOOMERANG
>     (BAGUL)(WANAL-GU) := NP
        : ((LAM X (CLASS1 X)) BOOMERANG)
_G2_1015 (BAGUL WANAL-GU) := NP/(NP\NP)
        : ((LAM LF (LAM P (P LF))) ((LAM X (CLASS1 X)) BOOMERANG))
LEX   (BANUL-DIN-GU) := (NP\NP)/N
        : (LAM X (LAM Y ((OF X) Y)))
LEX   (YARA-NU-N-DIN-GU) := N
        : MAN
>     (BANUL-DIN-GU)(YARA-NU-N-DIN-GU) := NP\NP
        : ((LAM X (LAM Y ((OF X) Y))) MAN)
>     (BAGUL WANAL-GU)(BANUL-DIN-GU YARA-NU-N-DIN-GU) := NP
        : (((LAM LF (LAM P (P LF))) ((LAM X (CLASS1 X)) BOOMERANG))
           ((LAM X (LAM Y ((OF X) Y))) MAN))
_G2_1015 (BAGUL WANAL-GU BANUL-DIN-GU YARA-NU-N-DIN-GU) := NP/(NP\NP)
        : ((LAM LF (LAM P (P LF)))
           (((LAM LF (LAM P (P LF))) ((LAM X (CLASS1 X)) BOOMERANG))
            ((LAM X (LAM Y ((OF X) Y))) MAN)))

Final LF, normal-order evaluated: 

    (LAM P (P ((OF MAN) (CLASS1 BOOMERANG)))) =
    (\ P . P (OF MAN (CLASS1 BOOMERANG)))

Derivation 5
--------------
LEX   (BAGUL) := NP/N
        : (LAM X (CLASS1 X))
LEX   (WANAL-GU) := N
        : BOOMERANG
>     (BAGUL)(WANAL-GU) := NP
        : ((LAM X (CLASS1 X)) BOOMERANG)
_G2_1015 (BAGUL WANAL-GU) := NP/(NP\NP)
        : ((LAM LF (LAM P (P LF))) ((LAM X (CLASS1 X)) BOOMERANG))
LEX   (BANUL-DIN-GU) := (NP\NP)/N
        : (LAM X (LAM Y ((OF X) Y)))
LEX   (YARA-NU-N-DIN-GU) := N
        : MAN
>     (BANUL-DIN-GU)(YARA-NU-N-DIN-GU) := NP\NP
        : ((LAM X (LAM Y ((OF X) Y))) MAN)
>     (BAGUL WANAL-GU)(BANUL-DIN-GU YARA-NU-N-DIN-GU) := NP
        : (((LAM LF (LAM P (P LF))) ((LAM X (CLASS1 X)) BOOMERANG))
           ((LAM X (LAM Y ((OF X) Y))) MAN))
_G2_1016 (BAGUL WANAL-GU BANUL-DIN-GU YARA-NU-N-DIN-GU) := VP/(VP\NP)
        : ((LAM LF (LAM P (P LF)))
           (((LAM LF (LAM P (P LF))) ((LAM X (CLASS1 X)) BOOMERANG))
            ((LAM X (LAM Y ((OF X) Y))) MAN)))

Final LF, normal-order evaluated: 

    (LAM P (P ((OF MAN) (CLASS1 BOOMERANG)))) =
    (\ P . P (OF MAN (CLASS1 BOOMERANG)))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
======================= l o a d i n g =======================================

Project g file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  CCG grammar source       : g.ccg
          token form       : g.lisptokens
  Compiled/loaded grammar  : g.ccg.lisp
       *CCG-GRAMMAR*       : 116 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

Summary of compiling type-raising for grammar   : g.ccg.lisp
There were NO errors/warnings in deriving second order functions
Number of lexical entries                       : 116
Number of lexical functions considered          : 3
Number of second-order case functions generated : 3
Number of paradigmatic functions out of them    : 3
Use (mergesave-tr <pn>) to merge and save the rules
 with current grammar to <pn>.ccg.lisp
Type-raising rules added at the end of *ccg-grammar*
compiled, subsumed and saved.
======================= l o a d i n g =======================================

Project g-de file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  Compiled/loaded grammar  : g-de.ccg.lisp
       *CCG-GRAMMAR*       : 119 entries
   *LEX-RULES-TABLE*       : 3 entries
=============================================================================

Derivations of (Dass sie kommt GLAUBT ER NICHT) onto S



Derivation 1
--------------
LEX   (Dass sie kommt) := S/(S/S)
        : (LAM P (P (COMES SHE)))
LEX   (GLAUBT) := (S\NP)/S
        : (LAM P (LAM X ((BELIEVE P) X)))
LEX   (ER) := S\(S\NP)
        : (LAM P (P HE))
<Bx   (GLAUBT)(ER) := S/S
        : (LAM X ((LAM P (P HE)) ((LAM P (LAM X ((BELIEVE P) X))) X)))
>     ("Dass sie kommt")(GLAUBT ER) := S
        : ((LAM P (P (COMES SHE)))
           (LAM X ((LAM P (P HE)) ((LAM P (LAM X ((BELIEVE P) X))) X))))
LEX   (NICHT) := S\^S
        : (LAM P (NEG P))
<     ("Dass sie kommt" GLAUBT ER)(NICHT) := S
        : ((LAM P (NEG P))
           ((LAM P (P (COMES SHE)))
            (LAM X ((LAM P (P HE)) ((LAM P (LAM X ((BELIEVE P) X))) X)))))

Final LF, normal-order evaluated: 

    (NEG ((BELIEVE (COMES SHE)) HE)) =
    (NEG (BELIEVE (COMES SHE) HE))

Derivation 2
--------------
LEX   (Dass sie kommt) := S/(S/S)
        : (LAM P (P (COMES SHE)))
LEX   (GLAUBT) := (S\NP)/S
        : (LAM P (LAM X ((BELIEVE P) X)))
LEX   (ER) := S\(S\NP)
        : (LAM P (P HE))
<Bx   (GLAUBT)(ER) := S/S
        : (LAM X ((LAM P (P HE)) ((LAM P (LAM X ((BELIEVE P) X))) X)))
>     ("Dass sie kommt")(GLAUBT ER) := S
        : ((LAM P (P (COMES SHE)))
           (LAM X ((LAM P (P HE)) ((LAM P (LAM X ((BELIEVE P) X))) X))))
_G2_1030 (Dass sie kommt GLAUBT ER) := S/(S\S)
        : ((LAM LF (LAM P (P LF)))
           ((LAM P (P (COMES SHE)))
            (LAM X ((LAM P (P HE)) ((LAM P (LAM X ((BELIEVE P) X))) X)))))
LEX   (NICHT) := S\^S
        : (LAM P (NEG P))
>     ("Dass sie kommt" GLAUBT ER)(NICHT) := S
        : (((LAM LF (LAM P (P LF)))
            ((LAM P (P (COMES SHE)))
             (LAM X ((LAM P (P HE)) ((LAM P (LAM X ((BELIEVE P) X))) X)))))
           (LAM P (NEG P)))

Final LF, normal-order evaluated: 

    (NEG ((BELIEVE (COMES SHE)) HE)) =
    (NEG (BELIEVE (COMES SHE) HE))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (Die Diplomarbeit ZU SCHREIBEN HAT die Studentin GELANWEILT) onto S



Derivation 1
--------------
_G2_1031 (Die Diplomarbeit) := (S\NP)/((S\NP)\NP)
        : ((LAM LF (LAM P (P LF))) THE-MA)
LEX   (ZU) := (S\NP)\(S\NP)
        : (LAM P P)
<Bx   ("Die Diplomarbeit")(ZU) := (S\NP)/((S\NP)\NP)
        : (LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
LEX   (SCHREIBEN) := (S\NP)\NP
        : (LAM X (LAM Y ((WRITE X) Y)))
LEX   (HAT) := (S\NP)\(S\NP)
        : (LAM P P)
<B    (SCHREIBEN)(HAT) := (S\NP)\NP
        : (LAM X ((LAM P P) ((LAM X (LAM Y ((WRITE X) Y))) X)))
>     ("Die Diplomarbeit" ZU)(SCHREIBEN HAT) := S\NP
        : ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
           (LAM X ((LAM P P) ((LAM X (LAM Y ((WRITE X) Y))) X))))
LEX   (die Studentin) := S\(S\NP)
        : (LAM P (P STUDENT))
<     ("Die Diplomarbeit" ZU SCHREIBEN HAT)("die Studentin") := S
        : ((LAM P (P STUDENT))
           ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
            (LAM X ((LAM P P) ((LAM X (LAM Y ((WRITE X) Y))) X)))))
LEX   (GELANWEILT) := S\S
        : (LAM P (BORE P))
<     ("Die Diplomarbeit" ZU SCHREIBEN HAT "die Studentin")(GELANWEILT) := S
        : ((LAM P (BORE P))
           ((LAM P (P STUDENT))
            ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
             (LAM X ((LAM P P) ((LAM X (LAM Y ((WRITE X) Y))) X))))))

Final LF, normal-order evaluated: 

    (BORE ((WRITE THE-MA) STUDENT)) =
    (BORE (WRITE THE-MA STUDENT))

Derivation 2
--------------
_G2_1031 (Die Diplomarbeit) := (S\NP)/((S\NP)\NP)
        : ((LAM LF (LAM P (P LF))) THE-MA)
LEX   (ZU) := (S\NP)\(S\NP)
        : (LAM P P)
<Bx   ("Die Diplomarbeit")(ZU) := (S\NP)/((S\NP)\NP)
        : (LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
LEX   (SCHREIBEN) := (S\NP)\NP
        : (LAM X (LAM Y ((WRITE X) Y)))
>     ("Die Diplomarbeit" ZU)(SCHREIBEN) := S\NP
        : ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
           (LAM X (LAM Y ((WRITE X) Y))))
LEX   (HAT) := (S\NP)\(S\NP)
        : (LAM P P)
<     ("Die Diplomarbeit" ZU SCHREIBEN)(HAT) := S\NP
        : ((LAM P P)
           ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
            (LAM X (LAM Y ((WRITE X) Y)))))
LEX   (die Studentin) := S\(S\NP)
        : (LAM P (P STUDENT))
<     ("Die Diplomarbeit" ZU SCHREIBEN HAT)("die Studentin") := S
        : ((LAM P (P STUDENT))
           ((LAM P P)
            ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
             (LAM X (LAM Y ((WRITE X) Y))))))
LEX   (GELANWEILT) := S\S
        : (LAM P (BORE P))
<     ("Die Diplomarbeit" ZU SCHREIBEN HAT "die Studentin")(GELANWEILT) := S
        : ((LAM P (BORE P))
           ((LAM P (P STUDENT))
            ((LAM P P)
             ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
              (LAM X (LAM Y ((WRITE X) Y)))))))

Final LF, normal-order evaluated: 

    (BORE ((WRITE THE-MA) STUDENT)) =
    (BORE (WRITE THE-MA STUDENT))

Derivation 3
--------------
_G2_1031 (Die Diplomarbeit) := (S\NP)/((S\NP)\NP)
        : ((LAM LF (LAM P (P LF))) THE-MA)
LEX   (ZU) := (S\NP)\(S\NP)
        : (LAM P P)
<Bx   ("Die Diplomarbeit")(ZU) := (S\NP)/((S\NP)\NP)
        : (LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
LEX   (SCHREIBEN) := (S\NP)\NP
        : (LAM X (LAM Y ((WRITE X) Y)))
LEX   (HAT) := (S\NP)\(S\NP)
        : (LAM P P)
<B    (SCHREIBEN)(HAT) := (S\NP)\NP
        : (LAM X ((LAM P P) ((LAM X (LAM Y ((WRITE X) Y))) X)))
>     ("Die Diplomarbeit" ZU)(SCHREIBEN HAT) := S\NP
        : ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
           (LAM X ((LAM P P) ((LAM X (LAM Y ((WRITE X) Y))) X))))
LEX   (die Studentin) := S\(S\NP)
        : (LAM P (P STUDENT))
<     ("Die Diplomarbeit" ZU SCHREIBEN HAT)("die Studentin") := S
        : ((LAM P (P STUDENT))
           ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
            (LAM X ((LAM P P) ((LAM X (LAM Y ((WRITE X) Y))) X)))))
_G2_1030 (Die Diplomarbeit ZU SCHREIBEN HAT die Studentin) := S/(S\S)
        : ((LAM LF (LAM P (P LF)))
           ((LAM P (P STUDENT))
            ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
             (LAM X ((LAM P P) ((LAM X (LAM Y ((WRITE X) Y))) X))))))
LEX   (GELANWEILT) := S\S
        : (LAM P (BORE P))
>     ("Die Diplomarbeit" ZU SCHREIBEN HAT "die Studentin")(GELANWEILT) := S
        : (((LAM LF (LAM P (P LF)))
            ((LAM P (P STUDENT))
             ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
              (LAM X ((LAM P P) ((LAM X (LAM Y ((WRITE X) Y))) X))))))
           (LAM P (BORE P)))

Final LF, normal-order evaluated: 

    (BORE ((WRITE THE-MA) STUDENT)) =
    (BORE (WRITE THE-MA STUDENT))

Derivation 4
--------------
_G2_1031 (Die Diplomarbeit) := (S\NP)/((S\NP)\NP)
        : ((LAM LF (LAM P (P LF))) THE-MA)
LEX   (ZU) := (S\NP)\(S\NP)
        : (LAM P P)
<Bx   ("Die Diplomarbeit")(ZU) := (S\NP)/((S\NP)\NP)
        : (LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
LEX   (SCHREIBEN) := (S\NP)\NP
        : (LAM X (LAM Y ((WRITE X) Y)))
>     ("Die Diplomarbeit" ZU)(SCHREIBEN) := S\NP
        : ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
           (LAM X (LAM Y ((WRITE X) Y))))
LEX   (HAT) := (S\NP)\(S\NP)
        : (LAM P P)
<     ("Die Diplomarbeit" ZU SCHREIBEN)(HAT) := S\NP
        : ((LAM P P)
           ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
            (LAM X (LAM Y ((WRITE X) Y)))))
LEX   (die Studentin) := S\(S\NP)
        : (LAM P (P STUDENT))
<     ("Die Diplomarbeit" ZU SCHREIBEN HAT)("die Studentin") := S
        : ((LAM P (P STUDENT))
           ((LAM P P)
            ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
             (LAM X (LAM Y ((WRITE X) Y))))))
_G2_1030 (Die Diplomarbeit ZU SCHREIBEN HAT die Studentin) := S/(S\S)
        : ((LAM LF (LAM P (P LF)))
           ((LAM P (P STUDENT))
            ((LAM P P)
             ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
              (LAM X (LAM Y ((WRITE X) Y)))))))
LEX   (GELANWEILT) := S\S
        : (LAM P (BORE P))
>     ("Die Diplomarbeit" ZU SCHREIBEN HAT "die Studentin")(GELANWEILT) := S
        : (((LAM LF (LAM P (P LF)))
            ((LAM P (P STUDENT))
             ((LAM P P)
              ((LAM X ((LAM P P) (((LAM LF (LAM P (P LF))) THE-MA) X)))
               (LAM X (LAM Y ((WRITE X) Y)))))))
           (LAM P (BORE P)))

Final LF, normal-order evaluated: 

    (BORE ((WRITE THE-MA) STUDENT)) =
    (BORE (WRITE THE-MA STUDENT))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
======================= l o a d i n g =======================================

Project g file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  CCG grammar source       : g.ccg
          token form       : g.lisptokens
  Compiled/loaded grammar  : g.ccg.lisp
       *CCG-GRAMMAR*       : 116 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

Summary of compiling type-raising for grammar   : g.ccg.lisp
There were NO errors/warnings in deriving second order functions
Number of lexical entries                       : 116
Number of lexical functions considered          : 3
Number of second-order case functions generated : 3
Number of paradigmatic functions out of them    : 3
Use (mergesave-tr <pn>) to merge and save the rules
 with current grammar to <pn>.ccg.lisp
Type-raising rules added at the end of *ccg-grammar*
compiled, subsumed and saved.
======================= l o a d i n g =======================================

Project g-hu file system (some optional, some system-generated)
-----------------------------------------------------------------------------
  Compiled/loaded grammar  : g-hu.ccg.lisp
       *CCG-GRAMMAR*       : 119 entries
   *LEX-RULES-TABLE*       : 3 entries
=============================================================================

Derivations of (JANOS LAT-T-A OT) onto S



Derivation 1
--------------
LEX   (JANOS) := NP
        : JOHN
LEX   (LAT-T-A) := (S\NP)/NP
        : (LAM X (LAM Y ((SEE X) Y)))
LEX   (OT) := NP
        : HIM
>     (LAT-T-A)(OT) := S\NP
        : ((LAM X (LAM Y ((SEE X) Y))) HIM)
<     (JANOS)(LAT-T-A OT) := S
        : (((LAM X (LAM Y ((SEE X) Y))) HIM) JOHN)

Final LF, normal-order evaluated: 

    ((SEE HIM) JOHN) =
    (SEE HIM JOHN)

Derivation 2
--------------
LEX   (JANOS) := NP
        : JOHN
LEX   (LAT-T-A) := (S\NP)/NP
        : (LAM X (LAM Y ((SEE X) Y)))
_G2_1035 (OT) := (S\NP)\((S\NP)/NP)
        : ((LAM LF (LAM P (P LF))) HIM)
<     (LAT-T-A)(OT) := S\NP
        : (((LAM LF (LAM P (P LF))) HIM) (LAM X (LAM Y ((SEE X) Y))))
<     (JANOS)(LAT-T-A OT) := S
        : ((((LAM LF (LAM P (P LF))) HIM) (LAM X (LAM Y ((SEE X) Y)))) JOHN)

Final LF, normal-order evaluated: 

    ((SEE HIM) JOHN) =
    (SEE HIM JOHN)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (JANOS LAT-T-A ENGEM) onto S


Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
Derivations of (JANOS LAT-OTT ENGEM) onto S



Derivation 1
--------------
LEX   (JANOS) := NP
        : JOHN
LEX   (LAT-OTT) := (S\NP)/NP
        : (LAM X (LAM Y ((SEE X) Y)))
LEX   (ENGEM) := NP
        : ME
>     (LAT-OTT)(ENGEM) := S\NP
        : ((LAM X (LAM Y ((SEE X) Y))) ME)
<     (JANOS)(LAT-OTT ENGEM) := S
        : (((LAM X (LAM Y ((SEE X) Y))) ME) JOHN)

Final LF, normal-order evaluated: 

    ((SEE ME) JOHN) =
    (SEE ME JOHN)

Derivation 2
--------------
LEX   (JANOS) := NP
        : JOHN
LEX   (LAT-OTT) := (S\NP)/NP
        : (LAM X (LAM Y ((SEE X) Y)))
_G2_1034 (ENGEM) := (S\NP)\((S\NP)/NP)
        : ((LAM LF (LAM P (P LF))) ME)
<     (LAT-OTT)(ENGEM) := S\NP
        : (((LAM LF (LAM P (P LF))) ME) (LAM X (LAM Y ((SEE X) Y))))
<     (JANOS)(LAT-OTT ENGEM) := S
        : ((((LAM LF (LAM P (P LF))) ME) (LAM X (LAM Y ((SEE X) Y)))) JOHN)

Final LF, normal-order evaluated: 

    ((SEE ME) JOHN) =
    (SEE ME JOHN)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
T
> (dribble)
